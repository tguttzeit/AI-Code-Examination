[
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 31,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 38,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 39,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 45,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 47,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 31,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 38,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 39,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 45,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 47,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 16,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 37,
        "column": 17,
        "endLine": 37,
        "endColumn": 18,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 37,
        "column": 20,
        "endLine": 37,
        "endColumn": 21,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 37,
        "column": 23,
        "endLine": 37,
        "endColumn": 24,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 35,
        "column": 8,
        "endLine": 43,
        "endColumn": 33,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 46,
        "column": 13,
        "endLine": 46,
        "endColumn": 14,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 46,
        "column": 16,
        "endLine": 46,
        "endColumn": 17,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 46,
        "column": 19,
        "endLine": 46,
        "endColumn": 20,
        "path": "py_app\\src\\BookExample\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "binary_search",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\binary_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (115/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_search",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\binary_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_search",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\binary_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_search",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\binary_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (115/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_search",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\binary_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_search",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\binary_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 6,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 6,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (107/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 45,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (107/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 45,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 15,
        "column": 4,
        "endLine": 15,
        "endColumn": 16,
        "path": "py_app\\src\\BookExample\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.min_distance",
        "line": 28,
        "column": 12,
        "endLine": 28,
        "endColumn": 13,
        "path": "py_app\\src\\BookExample\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 52,
        "column": 12,
        "endLine": 52,
        "endColumn": 13,
        "path": "py_app\\src\\BookExample\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 60,
        "column": 16,
        "endLine": 60,
        "endColumn": 17,
        "path": "py_app\\src\\BookExample\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 47,
        "column": 8,
        "endLine": 67,
        "endColumn": 47,
        "path": "py_app\\src\\BookExample\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 66,
        "column": 15,
        "endLine": 66,
        "endColumn": 31,
        "path": "py_app\\src\\BookExample\\dijkstra.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '10000000.0'.",
        "message-id": "R2004"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 17,
        "column": 12,
        "endLine": 17,
        "endColumn": 13,
        "path": "py_app\\src\\BookExample\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (115/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 55,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 57,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 58,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (115/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 55,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 57,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 58,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.__init__",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\BookExample\\floyd_warshall.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"MAX\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.__init__",
        "line": 6,
        "column": 18,
        "endLine": 6,
        "endColumn": 26,
        "path": "py_app\\src\\BookExample\\floyd_warshall.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"INF\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.initialise",
        "line": 13,
        "column": 8,
        "endLine": 22,
        "endColumn": 43,
        "path": "py_app\\src\\BookExample\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 25,
        "column": 4,
        "endLine": 25,
        "endColumn": 16,
        "path": "py_app\\src\\BookExample\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 50,
        "column": 8,
        "endLine": 59,
        "endColumn": 65,
        "path": "py_app\\src\\BookExample\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (100/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (100/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 20,
        "column": 23,
        "endLine": 20,
        "endColumn": 24,
        "path": "py_app\\src\\BookExample\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 20,
        "column": 26,
        "endLine": 20,
        "endColumn": 27,
        "path": "py_app\\src\\BookExample\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 25,
        "column": 18,
        "endLine": 25,
        "endColumn": 19,
        "path": "py_app\\src\\BookExample\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"s\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 37,
        "column": 8,
        "endLine": 50,
        "endColumn": 37,
        "path": "py_app\\src\\BookExample\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 17,
        "path": "py_app\\src\\BookExample\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 8,
        "endLine": 7,
        "endColumn": 9,
        "path": "py_app\\src\\BookExample\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"K\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 11,
        "column": 16,
        "endLine": 11,
        "endColumn": 17,
        "path": "py_app\\src\\BookExample\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 10,
        "column": 8,
        "endLine": 19,
        "endColumn": 41,
        "path": "py_app\\src\\BookExample\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\kruskal.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\kruskal.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 16,
        "path": "py_app\\src\\BookExample\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 13,
        "column": 4,
        "endLine": 13,
        "endColumn": 29,
        "path": "py_app\\src\\BookExample\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 19,
        "column": 8,
        "endLine": 19,
        "endColumn": 10,
        "path": "py_app\\src\\BookExample\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"ds\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 36,
        "column": 12,
        "endLine": 36,
        "endColumn": 13,
        "path": "py_app\\src\\BookExample\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 37,
        "column": 12,
        "endLine": 37,
        "endColumn": 13,
        "path": "py_app\\src\\BookExample\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.DisjointSet.union",
        "line": 66,
        "column": 24,
        "endLine": 66,
        "endColumn": 25,
        "path": "py_app\\src\\BookExample\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"a\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.DisjointSet.union",
        "line": 66,
        "column": 27,
        "endLine": 66,
        "endColumn": 28,
        "path": "py_app\\src\\BookExample\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"b\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.DisjointSet.union",
        "line": 68,
        "column": 12,
        "endLine": 68,
        "endColumn": 13,
        "path": "py_app\\src\\BookExample\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.DisjointSet.union",
        "line": 69,
        "column": 12,
        "endLine": 69,
        "endColumn": 13,
        "path": "py_app\\src\\BookExample\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (115/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (115/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 40,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 53,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 40,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 53,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\BookExample\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 13,
        "column": 4,
        "endLine": 13,
        "endColumn": 17,
        "path": "py_app\\src\\BookExample\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 40,
        "column": 4,
        "endLine": 40,
        "endColumn": 18,
        "path": "py_app\\src\\BookExample\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 45,
        "column": 12,
        "endLine": 45,
        "endColumn": 14,
        "path": "py_app\\src\\BookExample\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Variable name \"pi\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T1\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T1\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (111/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T1\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (107/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T1\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T1\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T1\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (111/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T1\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (107/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T1\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T1\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 69,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T1\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T10\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (123/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T10\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (119/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T10\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (123/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T10\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (119/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T10\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 8,
        "endLine": 20,
        "endColumn": 61,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T10\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.construct_path",
        "line": 39,
        "column": 4,
        "endLine": 39,
        "endColumn": 22,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T10\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T11\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (123/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T11\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (119/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T11\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (123/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T11\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (119/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T11\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 8,
        "endLine": 20,
        "endColumn": 61,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T11\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.construct_path",
        "line": 39,
        "column": 4,
        "endLine": 39,
        "endColumn": 22,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T11\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T12\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T12\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (114/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T12\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (110/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T12\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (122/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T12\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T12\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (114/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T12\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (110/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T12\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (122/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T12\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 71,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T12\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T13\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (114/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T13\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (110/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T13\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (114/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T13\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (110/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T13\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 71,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T13\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 27,
        "column": 12,
        "endLine": 27,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T13\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T14\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (107/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T14\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (107/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T14\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 69,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T14\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T15\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T15\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T15\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T15\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (124/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T15\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T15\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T15\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T15\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (124/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T15\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 71,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T15\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T16\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T16\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T16\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T16\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T16\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T16\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T16\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T16\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T16\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 16,
        "endLine": 16,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T16\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 19,
        "endLine": 16,
        "endColumn": 20,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T16\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 22,
        "endLine": 16,
        "endColumn": 23,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T16\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 51,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T16\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 21,
        "column": 12,
        "endLine": 21,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T16\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 21,
        "column": 15,
        "endLine": 21,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T16\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 21,
        "column": 18,
        "endLine": 21,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T16\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T17\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T17\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T17\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T17\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T17\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T17\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T17\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 69,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T17\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T18\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (117/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T18\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T18\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (117/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T18\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T18\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 74,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T18\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T19\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T19\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.__init__",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 14,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T19\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"V\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T19\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 16,
        "endLine": 16,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T19\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 19,
        "endLine": 16,
        "endColumn": 20,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T19\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 22,
        "endLine": 16,
        "endColumn": 23,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T19\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 49,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T19\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 21,
        "column": 12,
        "endLine": 21,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T19\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 21,
        "column": 15,
        "endLine": 21,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T19\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 21,
        "column": 18,
        "endLine": 21,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T19\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T2\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T2\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T2\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T2\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T2\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T2\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T2\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 69,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T2\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T20\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T20\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T20\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 71,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T20\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T21\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T21\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T21\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (124/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T21\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T21\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T21\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (124/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T21\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 71,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T21\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T22\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T22\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (135/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T22\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T22\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (131/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T22\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T22\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T22\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (135/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T22\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T22\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (131/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T22\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T22\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 90,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T22\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T23\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T23\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (120/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T23\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (116/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T23\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T23\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T23\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (120/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T23\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (116/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T23\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.__init__",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 14,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T23\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"V\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T23\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T23\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T24\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T24\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T24\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T24\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T24\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 71,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T24\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T25\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T25\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T25\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T25\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T25\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 71,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T25\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T26\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T26\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T26\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (111/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T26\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (107/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T26\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T26\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T26\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T26\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (111/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T26\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (107/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T26\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T26\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 69,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T26\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T27\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T27\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T27\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (100/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T27\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T27\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T27\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (100/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T27\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 16,
        "endLine": 16,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T27\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 19,
        "endLine": 16,
        "endColumn": 20,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T27\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 22,
        "endLine": 16,
        "endColumn": 23,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T27\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 49,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T27\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 21,
        "column": 12,
        "endLine": 21,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T27\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 21,
        "column": 15,
        "endLine": 21,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T27\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 21,
        "column": 18,
        "endLine": 21,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T27\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T28\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T28\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T28\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T28\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T28\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 16,
        "endLine": 16,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T28\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 19,
        "endLine": 16,
        "endColumn": 20,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T28\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 22,
        "endLine": 16,
        "endColumn": 23,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T28\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 49,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T28\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 21,
        "column": 12,
        "endLine": 21,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T28\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 21,
        "column": 15,
        "endLine": 21,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T28\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 21,
        "column": 18,
        "endLine": 21,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T28\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 27,
        "column": 12,
        "endLine": 27,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T28\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T29\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T29\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T29\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T29\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T29\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 8,
        "endLine": 20,
        "endColumn": 53,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T29\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 29,
        "column": 12,
        "endLine": 29,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T29\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T3\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (128/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T3\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T3\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (124/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T3\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T3\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T3\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (128/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T3\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T3\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (124/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T3\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T3\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T3\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 83,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T3\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T30\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T30\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T30\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T30\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T30\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 71,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T30\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T31\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T31\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T31\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T31\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.__init__",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 14,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T31\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"V\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T31\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 16,
        "endLine": 16,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T31\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 19,
        "endLine": 16,
        "endColumn": 20,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T31\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 22,
        "endLine": 16,
        "endColumn": 23,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T31\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 51,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T31\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 21,
        "column": 12,
        "endLine": 21,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T31\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 21,
        "column": 15,
        "endLine": 21,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T31\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 21,
        "column": 18,
        "endLine": 21,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T31\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 27,
        "column": 12,
        "endLine": 27,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T31\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T32\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T32\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T32\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T32\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.__init__",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 14,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T32\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"V\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T32\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 69,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T32\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T33\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T33\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T33\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T33\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T33\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T33\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T33\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 71,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T33\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T34\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T34\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T34\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (117/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T34\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T34\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T34\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (117/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.__init__",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 14,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T34\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"V\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T34\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 71,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T34\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T35\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (125/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T35\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T35\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (121/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T35\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (125/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T35\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T35\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (121/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T35\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 81,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T35\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T36\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T36\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T36\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T36\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T36\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T36\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T36\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T36\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T36\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T36\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T36\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T36\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T36\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 88,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T36\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T37\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T37\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T37\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T37\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T37\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T37\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T37\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 71,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T37\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T38\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (107/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T38\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (107/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T38\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 69,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T38\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T39\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T39\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T39\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T39\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T39\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T39\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T39\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T39\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.__init__",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 14,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T39\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"V\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T39\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 71,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T39\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T4\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T4\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T4\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T4\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T4\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T4\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.__init__",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 14,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T4\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"V\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T4\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 71,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T4\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T40\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T40\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T40\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T40\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T40\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T40\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T40\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T40\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T40\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 69,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T40\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T41\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T41\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T41\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (118/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T41\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T41\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T41\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (118/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T41\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 71,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T41\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T42\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T42\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T42\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (117/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T42\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T42\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T42\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (117/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.__init__",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 14,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T42\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"V\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T42\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 71,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T42\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T43\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T43\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T43\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T43\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T43\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T43\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T43\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T43\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T43\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T43\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T43\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 83,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T43\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T44\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T44\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T44\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T44\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T44\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T44\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T44\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T44\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T44\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 71,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T44\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T45\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T45\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (132/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T45\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T45\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (128/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T45\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T45\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (132/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T45\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T45\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (128/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T45\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 88,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T45\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T46\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (117/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T46\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T46\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T46\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (117/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T46\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T46\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T46\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 74,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T46\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T47\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T47\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T47\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T47\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (99/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T47\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T47\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T47\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T47\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (99/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.__init__",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 14,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T47\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"V\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T47\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 69,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T47\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T48\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T48\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T48\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T48\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (110/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T48\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T48\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T48\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T48\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (110/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T48\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 69,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T48\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T49\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T49\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (123/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T49\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (119/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T49\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (116/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T49\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T49\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (123/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T49\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (119/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T49\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (116/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T49\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 78,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T49\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T5\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T5\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T5\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T5\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.__init__",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 14,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T5\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"V\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T5\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 16,
        "endLine": 16,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T5\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 19,
        "endLine": 16,
        "endColumn": 20,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T5\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 22,
        "endLine": 16,
        "endColumn": 23,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T5\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 51,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T5\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 21,
        "column": 12,
        "endLine": 21,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T5\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 21,
        "column": 15,
        "endLine": 21,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T5\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 21,
        "column": 18,
        "endLine": 21,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T5\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T50\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T50\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (111/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T50\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (107/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T50\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T50\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (111/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T50\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (107/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T50\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 69,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T50\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T6\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T6\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (125/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T6\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T6\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (121/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T6\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T6\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (125/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T6\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T6\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (121/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.__init__",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 14,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T6\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"V\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T6\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 81,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T6\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T7\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T7\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T7\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 16,
        "endLine": 16,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T7\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 19,
        "endLine": 16,
        "endColumn": 20,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T7\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 22,
        "endLine": 16,
        "endColumn": 23,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T7\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 49,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T7\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 21,
        "column": 12,
        "endLine": 21,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T7\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 21,
        "column": 15,
        "endLine": 21,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T7\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 21,
        "column": 18,
        "endLine": 21,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T7\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 27,
        "column": 12,
        "endLine": 27,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T7\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T8\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T8\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T8\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T8\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T8\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 71,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T8\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T9\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T9\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T9\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T9\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T9\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T9\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T9\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 69,
        "path": "py_app\\src\\ChatGPT\\BellmanFord\\T9\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "binary_search",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinarySearch\\T43\\binary_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_search",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinarySearch\\T43\\binary_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T1\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T1\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T13\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T13\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 8,
        "column": 15,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T13\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '1'.",
        "message-id": "R2004"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 10,
        "column": 17,
        "endLine": 10,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T13\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '0'.",
        "message-id": "R2004"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T14\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T14\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 11,
        "column": 15,
        "endLine": 11,
        "endColumn": 25,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T15\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '1'.",
        "message-id": "R2004"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 13,
        "column": 17,
        "endLine": 13,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T15\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '0'.",
        "message-id": "R2004"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 8,
        "column": 15,
        "endLine": 8,
        "endColumn": 25,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T16\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '1'.",
        "message-id": "R2004"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 10,
        "column": 17,
        "endLine": 10,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T16\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '0'.",
        "message-id": "R2004"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T17\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T17\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T18\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T18\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T20\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T20\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T21\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T21\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T22\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T22\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T23\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T23\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 6,
        "column": 15,
        "endLine": 6,
        "endColumn": 31,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T23\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '1'.",
        "message-id": "R2004"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T24\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T24\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T25\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T25\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T27\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T27\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T28\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T28\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 4,
        "column": 19,
        "endLine": 4,
        "endColumn": 30,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T29\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '01'.",
        "message-id": "R2004"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T30\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T30\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 4,
        "column": 19,
        "endLine": 4,
        "endColumn": 30,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T32\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '01'.",
        "message-id": "R2004"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T33\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T33\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 9,
        "column": 15,
        "endLine": 9,
        "endColumn": 31,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T34\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '1'.",
        "message-id": "R2004"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T35\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T35\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T36\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T36\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T37\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T37\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 10,
        "column": 15,
        "endLine": 10,
        "endColumn": 31,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T38\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '1'.",
        "message-id": "R2004"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T39\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T39\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T4\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T4\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T40\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T40\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T41\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T41\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 7,
        "column": 19,
        "endLine": 7,
        "endColumn": 30,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T42\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '01'.",
        "message-id": "R2004"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 15,
        "column": 15,
        "endLine": 15,
        "endColumn": 25,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T42\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '1'.",
        "message-id": "R2004"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T43\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T43\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T44\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T44\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 11,
        "column": 15,
        "endLine": 11,
        "endColumn": 35,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T45\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '1'.",
        "message-id": "R2004"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T46\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T46\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T47\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T47\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 9,
        "column": 15,
        "endLine": 9,
        "endColumn": 31,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T47\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '1'.",
        "message-id": "R2004"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 11,
        "column": 17,
        "endLine": 11,
        "endColumn": 33,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T47\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '0'.",
        "message-id": "R2004"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T49\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T49\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T5\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T5\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T5\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T5\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T5\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T5\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 12,
        "column": 15,
        "endLine": 12,
        "endColumn": 31,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T7\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '1'.",
        "message-id": "R2004"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.is_valid_binary",
        "line": 19,
        "column": 19,
        "endLine": 19,
        "endColumn": 30,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T7\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '01'.",
        "message-id": "R2004"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T9\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BinaryToDecimal\\T9\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T1\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T1\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 19,
        "column": 8,
        "endLine": 26,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T1\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T10\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T10\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 19,
        "column": 8,
        "endLine": 26,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T10\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T11\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T11\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 23,
        "endLine": 9,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T11\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 26,
        "endLine": 9,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T11\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 24,
        "column": 8,
        "endLine": 34,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T11\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T12\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T12\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 23,
        "endLine": 9,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T12\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 26,
        "endLine": 9,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T12\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 21,
        "column": 8,
        "endLine": 31,
        "endColumn": 42,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T12\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 23,
        "endLine": 9,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T13\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 26,
        "endLine": 9,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T13\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 25,
        "column": 8,
        "endLine": 32,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T13\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T14\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T14\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 19,
        "column": 8,
        "endLine": 26,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T14\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T15\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T15\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 23,
        "column": 8,
        "endLine": 30,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T15\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T16\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T16\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 19,
        "column": 8,
        "endLine": 26,
        "endColumn": 42,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T16\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T17\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T17\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 13,
        "column": 8,
        "endLine": 32,
        "endColumn": 21,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T17\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 21,
        "column": 8,
        "endLine": 28,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T18\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T19\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T19\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 19,
        "column": 8,
        "endLine": 26,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T19\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T2\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T2\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 22,
        "column": 8,
        "endLine": 33,
        "endColumn": 42,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T2\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 23,
        "endLine": 9,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T20\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 26,
        "endLine": 9,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T20\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 25,
        "column": 8,
        "endLine": 32,
        "endColumn": 42,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T20\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T21\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T21\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 24,
        "column": 8,
        "endLine": 31,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T21\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 34,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T22\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 34,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T22\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T22\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T22\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 15,
        "column": 8,
        "endLine": 34,
        "endColumn": 83,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T22\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T23\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T23\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 20,
        "column": 8,
        "endLine": 27,
        "endColumn": 42,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T23\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T24\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T24\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 20,
        "column": 8,
        "endLine": 27,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T24\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T25\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T25\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 19,
        "column": 8,
        "endLine": 26,
        "endColumn": 42,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T25\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 23,
        "endLine": 9,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T26\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 26,
        "endLine": 9,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T26\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 15,
        "column": 8,
        "endLine": 34,
        "endColumn": 52,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T26\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T27\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T27\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 23,
        "column": 8,
        "endLine": 30,
        "endColumn": 42,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T27\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T28\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T28\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 14,
        "column": 8,
        "endLine": 33,
        "endColumn": 52,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T28\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T29\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T29\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 24,
        "column": 8,
        "endLine": 31,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T29\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 20,
        "column": 8,
        "endLine": 27,
        "endColumn": 42,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T3\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T30\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T30\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 19,
        "column": 8,
        "endLine": 26,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T30\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T31\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T31\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 19,
        "column": 8,
        "endLine": 26,
        "endColumn": 42,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T31\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 23,
        "endLine": 9,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T32\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 26,
        "endLine": 9,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T32\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 20,
        "column": 8,
        "endLine": 27,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T32\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 23,
        "endLine": 9,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T33\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 26,
        "endLine": 9,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T33\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 25,
        "column": 12,
        "endLine": 25,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T33\\graph.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 24,
        "column": 8,
        "endLine": 31,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T33\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T34\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T34\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 18,
        "column": 8,
        "endLine": 25,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T34\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T35\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T35\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 19,
        "column": 8,
        "endLine": 26,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T35\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 23,
        "endLine": 9,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T36\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 26,
        "endLine": 9,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T36\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 20,
        "column": 8,
        "endLine": 27,
        "endColumn": 42,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T36\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 23,
        "endLine": 9,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T37\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 26,
        "endLine": 9,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T37\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 20,
        "column": 8,
        "endLine": 27,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T37\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T38\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T38\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 20,
        "column": 8,
        "endLine": 27,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T38\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T39\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T39\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 19,
        "column": 8,
        "endLine": 26,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T39\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T4\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T4\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 24,
        "column": 8,
        "endLine": 31,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T4\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T40\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T40\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T40\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T40\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 27,
        "column": 8,
        "endLine": 34,
        "endColumn": 42,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T40\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T41\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T41\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 20,
        "column": 8,
        "endLine": 27,
        "endColumn": 42,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T41\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 23,
        "endLine": 9,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T42\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 26,
        "endLine": 9,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T42\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 19,
        "column": 8,
        "endLine": 26,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T42\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T43\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T43\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 20,
        "column": 8,
        "endLine": 27,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T43\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T44\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T44\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 19,
        "column": 8,
        "endLine": 26,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T44\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 23,
        "endLine": 9,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T45\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 26,
        "endLine": 9,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T45\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 20,
        "column": 8,
        "endLine": 27,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T45\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T46\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T46\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 26,
        "column": 8,
        "endLine": 33,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T46\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 23,
        "endLine": 9,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T47\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 26,
        "endLine": 9,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T47\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 25,
        "column": 8,
        "endLine": 32,
        "endColumn": 42,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T47\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T48\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T48\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 19,
        "column": 8,
        "endLine": 27,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T48\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T49\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T49\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 20,
        "column": 8,
        "endLine": 27,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T49\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 23,
        "endLine": 9,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T5\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 26,
        "endLine": 9,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T5\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 25,
        "column": 8,
        "endLine": 32,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T5\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 23,
        "endLine": 9,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T50\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 26,
        "endLine": 9,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T50\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 19,
        "column": 8,
        "endLine": 26,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T50\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 23,
        "endLine": 9,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T6\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 26,
        "endLine": 9,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T6\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 20,
        "column": 8,
        "endLine": 27,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T6\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 23,
        "endLine": 9,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T7\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 9,
        "column": 26,
        "endLine": 9,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T7\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 26,
        "column": 8,
        "endLine": 33,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T7\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 33,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T8\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 33,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T8\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T8\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T8\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 27,
        "column": 8,
        "endLine": 37,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T8\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T9\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T9\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 20,
        "column": 8,
        "endLine": 27,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\BreadthFirstSearch\\T9\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T1\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T1\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 104,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T1\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 50,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T10\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 16,
        "column": 8,
        "endLine": 22,
        "endColumn": 50,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T11\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs.dfs_recursive",
        "line": 17,
        "column": 12,
        "endLine": 20,
        "endColumn": 47,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T12\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 50,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T13\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch._dfs_recursive",
        "line": 22,
        "column": 8,
        "endLine": 27,
        "endColumn": 57,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T14\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T15\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (108/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T15\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (108/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 50,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T16\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 16,
        "column": 8,
        "endLine": 26,
        "endColumn": 50,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T17\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (5/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 50,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T18\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs.dfs_recursive",
        "line": 17,
        "column": 12,
        "endLine": 20,
        "endColumn": 47,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T19\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T2\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T2\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 104,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T2\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch._dfs_recursive",
        "line": 26,
        "column": 8,
        "endLine": 29,
        "endColumn": 49,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T20\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 50,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T21\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T22\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T22\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 104,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T22\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T23\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T23\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 104,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T23\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 16,
        "column": 8,
        "endLine": 25,
        "endColumn": 50,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T25\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (5/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 50,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T26\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 50,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T27\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T28\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T28\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 104,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T28\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T29\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T29\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 104,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T29\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T3\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T3\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 104,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T3\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T30\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T30\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 104,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T30\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 50,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T31\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T32\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T32\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 104,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T32\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T33\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T33\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 83,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T33\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch._dfs_recursive",
        "line": 23,
        "column": 8,
        "endLine": 26,
        "endColumn": 64,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T34\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 50,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T35\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T36\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T36\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 104,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T36\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 50,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T37\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T38\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T38\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 83,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T38\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch._dfs_recursive",
        "line": 27,
        "column": 8,
        "endLine": 30,
        "endColumn": 49,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T39\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T4\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T4\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 83,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T4\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T40\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T40\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 104,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T40\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 50,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T41\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs.dfs_recursive",
        "line": 19,
        "column": 12,
        "endLine": 22,
        "endColumn": 47,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T42\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 50,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T43\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 50,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T44\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 56,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T45\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 50,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T46\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 50,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T47\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 50,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T48\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T49\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (99/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T49\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (99/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 56,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T49\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T5\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T5\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 104,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T5\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 3,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T50\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T50\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 3,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T50\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T50\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs.dfs_recursive",
        "line": 21,
        "column": 12,
        "endLine": 24,
        "endColumn": 47,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T50\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T6\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T6\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 104,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T6\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs.dfs_helper",
        "line": 18,
        "column": 12,
        "endLine": 21,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T7\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T8\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T8\\depth_first_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 104,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T8\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 50,
        "path": "py_app\\src\\ChatGPT\\DepthFirstSearch\\T9\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T1\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T1\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T1\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T1\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T1\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 21,
        "column": 8,
        "endLine": 36,
        "endColumn": 70,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T1\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T10\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 31,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T10\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (136/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T10\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 31,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T10\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (136/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T10\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 18,
        "column": 8,
        "endLine": 29,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T10\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T11\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T11\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 42,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T11\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (118/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T11\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T11\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 42,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T11\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (118/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T11\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 22,
        "column": 8,
        "endLine": 39,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T11\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T12\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T12\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T12\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 17,
        "column": 8,
        "endLine": 28,
        "endColumn": 87,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T12\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T13\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 40,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T13\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T13\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 40,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T13\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T13\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 23,
        "column": 8,
        "endLine": 40,
        "endColumn": 80,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T13\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 39,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T14\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 39,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T14\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T14\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 22,
        "column": 8,
        "endLine": 36,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T14\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T15\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 36,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T15\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 42,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T15\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T15\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 36,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T15\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 42,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T15\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T15\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 22,
        "column": 8,
        "endLine": 39,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T15\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T16\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T16\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T16\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 17,
        "column": 8,
        "endLine": 28,
        "endColumn": 93,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T16\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T17\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T17\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T17\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 33,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T17\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T17\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T17\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T17\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 33,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T17\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T17\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 21,
        "column": 8,
        "endLine": 36,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T17\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 46,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T18\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 46,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T18\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T18\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 24,
        "column": 8,
        "endLine": 43,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T18\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T19\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T19\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T19\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 18,
        "column": 8,
        "endLine": 18,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T19\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"pq\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 23,
        "column": 20,
        "endLine": 23,
        "endColumn": 21,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T19\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 31,
        "column": 16,
        "endLine": 31,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T19\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 22,
        "column": 8,
        "endLine": 34,
        "endColumn": 57,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T19\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T2\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T2\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T2\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T2\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T2\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 35,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T2\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T2\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T2\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T2\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T2\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T2\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 35,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T2\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T2\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 23,
        "column": 8,
        "endLine": 39,
        "endColumn": 61,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T2\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T20\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T20\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 39,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T20\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (118/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T20\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T20\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 39,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T20\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (118/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T20\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 21,
        "column": 8,
        "endLine": 36,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T20\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 38,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (108/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 43,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 44,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (114/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 38,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (108/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 43,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 44,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (114/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 23,
        "column": 8,
        "endLine": 41,
        "endColumn": 66,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T22\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T22\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 38,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T22\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 43,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T22\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T22\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T22\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 38,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T22\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 43,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T22\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T22\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 23,
        "column": 8,
        "endLine": 41,
        "endColumn": 72,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T22\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 42,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T23\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 45,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T23\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 42,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T23\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 45,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T23\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T23\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 24,
        "column": 8,
        "endLine": 42,
        "endColumn": 84,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T23\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (5/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T24\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T24\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T24\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 17,
        "column": 8,
        "endLine": 29,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T24\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T25\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T25\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T25\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T25\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T25\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 19,
        "column": 8,
        "endLine": 31,
        "endColumn": 61,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T25\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 35,
        "column": 8,
        "endLine": 47,
        "endColumn": 21,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T25\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T26\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T26\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T26\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 21,
        "column": 20,
        "endLine": 21,
        "endColumn": 21,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T26\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 28,
        "column": 16,
        "endLine": 28,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T26\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 28,
        "column": 19,
        "endLine": 28,
        "endColumn": 20,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T26\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 20,
        "column": 8,
        "endLine": 31,
        "endColumn": 69,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T26\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T27\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T27\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 32,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T27\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 38,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T27\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T27\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T27\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 32,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T27\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 38,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T27\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T27\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 21,
        "column": 8,
        "endLine": 35,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T27\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T28\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T28\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T28\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T28\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T28\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T28\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T28\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 21,
        "column": 8,
        "endLine": 36,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T28\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T29\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 33,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T29\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (119/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 47,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T29\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T29\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 33,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T29\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (119/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 47,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T29\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T29\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 24,
        "column": 8,
        "endLine": 41,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T29\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra._get_path",
        "line": 51,
        "column": 4,
        "endLine": 51,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T29\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T3\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 19,
        "column": 8,
        "endLine": 31,
        "endColumn": 59,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T3\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra._construct_path",
        "line": 41,
        "column": 4,
        "endLine": 41,
        "endColumn": 23,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T3\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 31,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T30\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (114/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 31,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T30\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (114/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T30\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 17,
        "column": 8,
        "endLine": 28,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T30\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 34,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 40,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 34,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 40,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 21,
        "column": 8,
        "endLine": 37,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T32\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T32\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 34,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T32\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T32\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T32\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 34,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T32\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T32\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 24,
        "column": 8,
        "endLine": 38,
        "endColumn": 61,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T32\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T33\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T33\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T33\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 24,
        "column": 8,
        "endLine": 38,
        "endColumn": 72,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T33\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 42,
        "column": 8,
        "endLine": 52,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T33\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T34\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T34\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 35,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T34\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T34\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T34\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 35,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T34\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T34\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 24,
        "column": 8,
        "endLine": 43,
        "endColumn": 72,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T34\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T35\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T35\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T35\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 21,
        "column": 8,
        "endLine": 36,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T35\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T36\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T36\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 40,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T36\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 49,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T36\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (118/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T36\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T36\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 40,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T36\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 49,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T36\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (118/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T36\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 24,
        "column": 8,
        "endLine": 43,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T36\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T37\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 44,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T37\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T37\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 44,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T37\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T37\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 24,
        "column": 8,
        "endLine": 38,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T37\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T38\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 49,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T38\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T38\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 49,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T38\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T38\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 24,
        "column": 8,
        "endLine": 43,
        "endColumn": 67,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T38\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T39\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T39\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (98/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 35,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T39\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 41,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T39\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (108/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T39\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T39\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (98/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 35,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T39\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 41,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T39\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (108/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T39\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 23,
        "column": 8,
        "endLine": 38,
        "endColumn": 72,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T39\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T4\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T4\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 39,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T4\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (107/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 48,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T4\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (123/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T4\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T4\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 39,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T4\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (107/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 48,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T4\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (123/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T4\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 24,
        "column": 8,
        "endLine": 42,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T4\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T40\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T40\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T40\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 36,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T40\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 44,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T40\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T40\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T40\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T40\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 36,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T40\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 44,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T40\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T40\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 24,
        "column": 8,
        "endLine": 42,
        "endColumn": 65,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T40\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 46,
        "column": 8,
        "endLine": 54,
        "endColumn": 41,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T40\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T41\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T41\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T41\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 17,
        "column": 8,
        "endLine": 28,
        "endColumn": 81,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T41\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T42\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 32,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T42\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T42\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 32,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T42\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T42\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 21,
        "column": 8,
        "endLine": 35,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T42\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T43\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T43\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T43\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 21,
        "column": 8,
        "endLine": 32,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T43\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T44\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T44\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T44\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (99/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T44\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T44\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T44\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T44\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (99/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T44\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T44\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 24,
        "column": 8,
        "endLine": 38,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T44\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 42,
        "column": 8,
        "endLine": 48,
        "endColumn": 53,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T44\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T45\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (99/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 36,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T45\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T45\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (99/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 36,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T45\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T45\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 24,
        "column": 8,
        "endLine": 41,
        "endColumn": 65,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T45\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T46\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T46\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 37,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T46\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 43,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T46\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T46\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T46\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 37,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T46\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 43,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T46\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T46\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 23,
        "column": 8,
        "endLine": 40,
        "endColumn": 72,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T46\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T47\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T47\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 40,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T47\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 45,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T47\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 48,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T47\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 56,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T47\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T47\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T47\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 40,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T47\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 45,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T47\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 48,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T47\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 56,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T47\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T47\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 25,
        "column": 8,
        "endLine": 50,
        "endColumn": 67,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T47\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T48\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T48\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T48\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (103/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 36,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T48\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 45,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T48\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (118/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T48\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T48\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T48\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (103/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 36,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T48\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 45,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T48\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (118/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T48\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 24,
        "column": 8,
        "endLine": 39,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T48\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T49\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T49\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 38,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T49\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 47,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T49\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T49\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T49\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 38,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T49\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 47,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T49\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T49\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 24,
        "column": 8,
        "endLine": 41,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T49\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T5\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T5\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T5\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 22,
        "column": 8,
        "endLine": 35,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T5\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T50\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 35,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T50\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 43,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T50\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T50\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 35,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T50\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 43,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T50\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T50\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 24,
        "column": 8,
        "endLine": 40,
        "endColumn": 65,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T50\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T6\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 44,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T6\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (126/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T6\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 44,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T6\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (126/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T6\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 24,
        "column": 8,
        "endLine": 38,
        "endColumn": 72,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T6\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra._get_path",
        "line": 48,
        "column": 4,
        "endLine": 48,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T6\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 29,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T7\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 29,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T7\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T7\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 17,
        "column": 8,
        "endLine": 29,
        "endColumn": 81,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T7\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T8\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T8\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T8\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 36,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T8\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 45,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T8\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T8\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T8\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T8\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 36,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T8\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 45,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T8\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T8\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 24,
        "column": 8,
        "endLine": 39,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T8\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T9\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 22,
        "column": 8,
        "endLine": 35,
        "endColumn": 76,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T9\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.construct_path",
        "line": 48,
        "column": 4,
        "endLine": 48,
        "endColumn": 22,
        "path": "py_app\\src\\ChatGPT\\Dijkstra\\T9\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T1\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T1\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T11\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T11\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (129/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T11\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T11\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (129/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T12\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T12\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T12\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T12\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T13\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T13\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T13\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T13\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T13\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T13\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T13\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T13\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T14\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T14\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T14\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T14\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T15\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T15\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T15\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (131/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T15\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T15\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T15\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (131/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T16\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T16\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T17\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T17\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 6,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T18\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T18\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T18\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (145/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 6,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T18\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T18\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T18\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (145/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T19\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T19\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (98/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T19\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T19\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (98/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T2\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T2\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T20\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T20\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T21\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T21\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T21\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T21\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T21\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T21\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.gcd",
        "line": 25,
        "column": 18,
        "endLine": 25,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T21\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Argument name \"a\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.gcd",
        "line": 25,
        "column": 21,
        "endLine": 25,
        "endColumn": 22,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T21\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Argument name \"b\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T22\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T22\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T22\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T22\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (100/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T22\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T22\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T22\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T22\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (100/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.gcd",
        "line": 3,
        "column": 12,
        "endLine": 3,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T22\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Argument name \"a\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.gcd",
        "line": 3,
        "column": 15,
        "endLine": 3,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T22\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Argument name \"b\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T23\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T23\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T24\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T24\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T26\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T26\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T26\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T26\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 6,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T27\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 6,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T27\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T29\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T29\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.gcd",
        "line": 8,
        "column": 12,
        "endLine": 8,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T3\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Argument name \"a\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.gcd",
        "line": 8,
        "column": 15,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T3\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Argument name \"b\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T30\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T30\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 5,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T31\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T31\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (111/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 5,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T31\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T31\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (111/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 11,
        "column": 12,
        "endLine": 11,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T31\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 7,
        "column": 12,
        "endLine": 7,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T32\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T33\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T33\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T33\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T33\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T34\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T34\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T34\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T34\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T35\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T35\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T35\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T35\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.gcd",
        "line": 8,
        "column": 12,
        "endLine": 8,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T35\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Argument name \"a\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.gcd",
        "line": 8,
        "column": 15,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T35\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Argument name \"b\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 25,
        "column": 12,
        "endLine": 25,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T35\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T36\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T36\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T38\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T38\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T39\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (130/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T39\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (130/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T4\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T4\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T40\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T40\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T41\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T41\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.gcd",
        "line": 3,
        "column": 12,
        "endLine": 3,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T41\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Argument name \"a\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.gcd",
        "line": 3,
        "column": 15,
        "endLine": 3,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T41\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Argument name \"b\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T42\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T42\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T42\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T42\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T43\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T43\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T43\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T43\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T44\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T44\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T44\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T44\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T44\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T44\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T45\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (112/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T45\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (197/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T45\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (112/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T45\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (197/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T46\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T46\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T47\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (98/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T47\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (98/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T48\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (141/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T48\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (141/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T49\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (107/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T49\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T49\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (107/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T49\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.gcd",
        "line": 28,
        "column": 18,
        "endLine": 28,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T49\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Argument name \"a\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.gcd",
        "line": 28,
        "column": 21,
        "endLine": 28,
        "endColumn": 22,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T49\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Argument name \"b\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T5\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (103/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T5\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T5\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T5\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (103/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T5\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T5\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T50\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T50\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T6\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T6\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T6\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T6\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T6\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T6\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T7\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T7\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T7\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T7\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T8\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T8\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.gcd",
        "line": 6,
        "column": 12,
        "endLine": 6,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T8\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Argument name \"a\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.gcd",
        "line": 6,
        "column": 15,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T8\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Argument name \"b\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 21,
        "column": 12,
        "endLine": 21,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T8\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T9\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T9\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T9\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\EgyptianFractions\\T9\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T1\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T1\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 40,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T1\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T1\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T1\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 40,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T1\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T1\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 25,
        "column": 8,
        "endLine": 29,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T1\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 37,
        "column": 8,
        "endLine": 42,
        "endColumn": 25,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T1\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 47,
        "column": 8,
        "endLine": 51,
        "endColumn": 78,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T1\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T10\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 27,
        "column": 8,
        "endLine": 31,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T10\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 33,
        "column": 8,
        "endLine": 38,
        "endColumn": 67,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T10\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (99/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 46,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 47,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (99/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 46,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 47,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.__init__",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"INF\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 22,
        "column": 8,
        "endLine": 28,
        "endColumn": 65,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (5/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 43,
        "column": 8,
        "endLine": 47,
        "endColumn": 90,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T12\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 41,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T12\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T12\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 41,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T12\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T12\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 29,
        "column": 8,
        "endLine": 33,
        "endColumn": 78,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T12\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 36,
        "column": 8,
        "endLine": 44,
        "endColumn": 36,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T12\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 49,
        "column": 8,
        "endLine": 53,
        "endColumn": 78,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T12\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T13\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T13\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T13\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T13\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T13\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 37,
        "column": 8,
        "endLine": 40,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T13\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 43,
        "column": 8,
        "endLine": 48,
        "endColumn": 67,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T13\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T14\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 29,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T14\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 42,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T14\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T14\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 29,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T14\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 42,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T14\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T14\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 19,
        "column": 8,
        "endLine": 23,
        "endColumn": 72,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T14\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 38,
        "column": 8,
        "endLine": 46,
        "endColumn": 25,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T14\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T15\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T15\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 38,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T15\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T15\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T15\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 38,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T15\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T15\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 34,
        "column": 8,
        "endLine": 38,
        "endColumn": 84,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T15\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 40,
        "column": 8,
        "endLine": 45,
        "endColumn": 67,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T15\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T16\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T16\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T16\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T16\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T16\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T16\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 10,
        "column": 4,
        "endLine": 10,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T16\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 21,
        "column": 8,
        "endLine": 24,
        "endColumn": 41,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T16\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 27,
        "column": 8,
        "endLine": 32,
        "endColumn": 61,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T16\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 44,
        "column": 8,
        "endLine": 48,
        "endColumn": 78,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T16\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T17\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T17\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T17\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 31,
        "column": 8,
        "endLine": 34,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T17\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 36,
        "column": 8,
        "endLine": 41,
        "endColumn": 67,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T17\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T18\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 28,
        "column": 8,
        "endLine": 33,
        "endColumn": 47,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T18\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 35,
        "column": 8,
        "endLine": 40,
        "endColumn": 67,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T18\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 6,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T19\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T19\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 6,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T19\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T19\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 10,
        "column": 4,
        "endLine": 10,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T19\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 15,
        "column": 8,
        "endLine": 19,
        "endColumn": 78,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T19\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 22,
        "column": 8,
        "endLine": 36,
        "endColumn": 21,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T19\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (5/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T2\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T2\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 32,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T2\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T2\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T2\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 32,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T2\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T2\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 19,
        "column": 8,
        "endLine": 23,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T2\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 25,
        "column": 8,
        "endLine": 36,
        "endColumn": 23,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T2\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 41,
        "column": 8,
        "endLine": 45,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T2\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T20\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T20\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T20\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T20\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T20\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 57,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T20\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T21\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (117/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 37,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T21\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 38,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T21\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T21\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (117/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 37,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T21\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 38,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T21\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T21\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 15,
        "column": 8,
        "endLine": 31,
        "endColumn": 21,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T21\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 15,
        "column": 8,
        "endLine": 31,
        "endColumn": 21,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T21\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 34,
        "column": 8,
        "endLine": 38,
        "endColumn": 90,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T21\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T22\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 45,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T22\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T22\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 45,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T22\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T22\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 30,
        "column": 8,
        "endLine": 34,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T22\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 42,
        "column": 8,
        "endLine": 47,
        "endColumn": 25,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T22\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 53,
        "column": 8,
        "endLine": 57,
        "endColumn": 78,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T22\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T23\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T23\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T23\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T23\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T23\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 40,
        "column": 8,
        "endLine": 44,
        "endColumn": 78,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T23\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T24\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T24\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T24\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 14,
        "column": 8,
        "endLine": 32,
        "endColumn": 21,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T24\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (5/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 14,
        "column": 8,
        "endLine": 32,
        "endColumn": 21,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T24\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 36,
        "column": 8,
        "endLine": 40,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T24\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T25\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T25\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 42,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T25\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (111/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T25\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T25\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 42,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T25\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (111/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T25\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 28,
        "column": 8,
        "endLine": 32,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T25\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 35,
        "column": 8,
        "endLine": 46,
        "endColumn": 23,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T25\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 50,
        "column": 8,
        "endLine": 54,
        "endColumn": 78,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T25\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T26\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T26\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T26\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (121/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T26\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T26\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T26\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (121/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T26\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 14,
        "column": 8,
        "endLine": 18,
        "endColumn": 78,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T26\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 26,
        "column": 8,
        "endLine": 31,
        "endColumn": 25,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T26\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T27\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 26,
        "column": 8,
        "endLine": 29,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T27\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 31,
        "column": 8,
        "endLine": 36,
        "endColumn": 67,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T27\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T28\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T28\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T28\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T28\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 41,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T28\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 42,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T28\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T28\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T28\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T28\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T28\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 41,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T28\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 42,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T28\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T28\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 31,
        "column": 8,
        "endLine": 36,
        "endColumn": 59,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T28\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 38,
        "column": 8,
        "endLine": 42,
        "endColumn": 90,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T28\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 35,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T29\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (99/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 36,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T29\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (99/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 35,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T29\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (99/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 36,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T29\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (99/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T29\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 32,
        "column": 8,
        "endLine": 37,
        "endColumn": 73,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T29\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T3\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T3\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 31,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T3\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T3\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T3\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 31,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T3\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T3\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 19,
        "column": 8,
        "endLine": 23,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T3\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 25,
        "column": 8,
        "endLine": 35,
        "endColumn": 23,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T3\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 40,
        "column": 8,
        "endLine": 44,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T3\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T30\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T30\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T30\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T30\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T30\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T30\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T30\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 14,
        "column": 8,
        "endLine": 18,
        "endColumn": 78,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T30\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 26,
        "column": 8,
        "endLine": 31,
        "endColumn": 25,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T30\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T31\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 31,
        "column": 8,
        "endLine": 35,
        "endColumn": 78,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T31\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T32\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T32\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T32\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 37,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T32\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 52,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T32\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T32\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T32\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T32\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 37,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T32\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 52,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T32\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T32\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 21,
        "column": 8,
        "endLine": 25,
        "endColumn": 39,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T32\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 28,
        "column": 8,
        "endLine": 33,
        "endColumn": 57,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T32\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 49,
        "column": 8,
        "endLine": 52,
        "endColumn": 97,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T32\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T33\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T33\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T33\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T33\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T33\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 21,
        "column": 8,
        "endLine": 25,
        "endColumn": 38,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T33\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 28,
        "column": 8,
        "endLine": 33,
        "endColumn": 55,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T33\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 49,
        "column": 8,
        "endLine": 53,
        "endColumn": 78,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T33\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T34\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T34\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T34\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T34\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T34\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T34\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T34\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 34,
        "column": 8,
        "endLine": 38,
        "endColumn": 42,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T34\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 40,
        "column": 8,
        "endLine": 45,
        "endColumn": 71,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T34\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T35\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T35\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 42,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T35\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T35\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T35\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 42,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T35\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 10,
        "column": 4,
        "endLine": 10,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T35\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 29,
        "column": 8,
        "endLine": 33,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T35\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 40,
        "column": 8,
        "endLine": 45,
        "endColumn": 25,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T35\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 51,
        "column": 8,
        "endLine": 55,
        "endColumn": 78,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T35\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T36\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 34,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T36\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T36\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 34,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T36\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T36\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 18,
        "column": 8,
        "endLine": 22,
        "endColumn": 77,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T36\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T37\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T37\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T37\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 36,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T37\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (121/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 44,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T37\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T37\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T37\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T37\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 36,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T37\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (121/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 44,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T37\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T37\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 22,
        "column": 8,
        "endLine": 26,
        "endColumn": 81,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T37\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 34,
        "column": 8,
        "endLine": 39,
        "endColumn": 25,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T37\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 45,
        "column": 8,
        "endLine": 49,
        "endColumn": 78,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T37\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T38\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T38\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T38\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T38\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 11,
        "column": 4,
        "endLine": 11,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T38\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 33,
        "column": 8,
        "endLine": 38,
        "endColumn": 57,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T38\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T39\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 23,
        "column": 8,
        "endLine": 28,
        "endColumn": 67,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T39\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 29,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T4\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 29,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T4\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T4\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 23,
        "column": 8,
        "endLine": 31,
        "endColumn": 78,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T4\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T40\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T40\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 39,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T40\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 43,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T40\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T40\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T40\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 39,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T40\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 43,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T40\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 10,
        "column": 4,
        "endLine": 10,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T40\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 23,
        "column": 8,
        "endLine": 27,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T40\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 36,
        "column": 8,
        "endLine": 41,
        "endColumn": 25,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T40\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 47,
        "column": 8,
        "endLine": 51,
        "endColumn": 78,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T40\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T41\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T41\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 34,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T41\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (121/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T41\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T41\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 34,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T41\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (121/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 10,
        "column": 4,
        "endLine": 10,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T41\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 17,
        "column": 8,
        "endLine": 21,
        "endColumn": 78,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T41\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 31,
        "column": 8,
        "endLine": 39,
        "endColumn": 25,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T41\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T42\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T42\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T42\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T42\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T42\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T42\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T42\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 15,
        "column": 8,
        "endLine": 19,
        "endColumn": 44,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T42\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 22,
        "column": 8,
        "endLine": 27,
        "endColumn": 67,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T42\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T43\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T43\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 32,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T43\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T43\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T43\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 32,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T43\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T43\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 19,
        "column": 8,
        "endLine": 23,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T43\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 29,
        "column": 8,
        "endLine": 34,
        "endColumn": 25,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T43\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 41,
        "column": 8,
        "endLine": 45,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T43\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T44\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T44\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 31,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T44\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T44\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T44\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 31,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T44\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T44\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 19,
        "column": 8,
        "endLine": 23,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T44\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 29,
        "column": 8,
        "endLine": 34,
        "endColumn": 25,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T44\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 41,
        "column": 8,
        "endLine": 45,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T44\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T45\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T45\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T45\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T45\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T45\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T45\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T45\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 18,
        "column": 8,
        "endLine": 22,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T45\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 24,
        "column": 8,
        "endLine": 34,
        "endColumn": 23,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T45\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 38,
        "column": 8,
        "endLine": 42,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T45\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T46\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 22,
        "column": 8,
        "endLine": 25,
        "endColumn": 41,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T46\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 28,
        "column": 8,
        "endLine": 33,
        "endColumn": 61,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T46\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 46,
        "column": 8,
        "endLine": 50,
        "endColumn": 78,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T46\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T47\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T47\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T47\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T47\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T47\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T47\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T47\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 18,
        "column": 8,
        "endLine": 22,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T47\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 28,
        "column": 8,
        "endLine": 33,
        "endColumn": 25,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T47\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 39,
        "column": 8,
        "endLine": 43,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T47\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T48\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T48\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T48\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T48\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 34,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T48\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (127/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T48\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T48\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T48\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T48\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 34,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T48\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (127/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T48\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 21,
        "column": 8,
        "endLine": 25,
        "endColumn": 81,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T48\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 28,
        "column": 8,
        "endLine": 38,
        "endColumn": 23,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T48\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 42,
        "column": 8,
        "endLine": 46,
        "endColumn": 78,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T48\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T49\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T49\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T49\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T49\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T49\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 31,
        "column": 8,
        "endLine": 36,
        "endColumn": 57,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T49\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T5\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T5\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 34,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T5\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T5\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T5\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 34,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T5\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T5\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 22,
        "column": 8,
        "endLine": 26,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T5\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 32,
        "column": 8,
        "endLine": 37,
        "endColumn": 25,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T5\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 43,
        "column": 8,
        "endLine": 47,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T5\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T50\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T50\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 32,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T50\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T50\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T50\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 32,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T50\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T50\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 20,
        "column": 8,
        "endLine": 24,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T50\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 26,
        "column": 8,
        "endLine": 36,
        "endColumn": 23,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T50\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 41,
        "column": 8,
        "endLine": 45,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T50\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T6\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T6\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T6\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 41,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T6\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (107/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 53,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T6\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T6\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T6\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T6\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 41,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T6\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (107/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 53,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T6\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 10,
        "column": 4,
        "endLine": 10,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T6\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 27,
        "column": 8,
        "endLine": 30,
        "endColumn": 101,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T6\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 38,
        "column": 8,
        "endLine": 43,
        "endColumn": 25,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T6\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 50,
        "column": 8,
        "endLine": 53,
        "endColumn": 97,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T6\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T7\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T7\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.__init__",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T7\\floyd_warshall.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"INF\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T7\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 16,
        "column": 8,
        "endLine": 44,
        "endColumn": 21,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T7\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 48,
        "column": 8,
        "endLine": 52,
        "endColumn": 78,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T7\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T8\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T8\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T8\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 67,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T8\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T9\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T9\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 31,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T9\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T9\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T9\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 31,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T9\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T9\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 19,
        "column": 8,
        "endLine": 23,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T9\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.path",
        "line": 25,
        "column": 8,
        "endLine": 35,
        "endColumn": 23,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T9\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 40,
        "column": 8,
        "endLine": 44,
        "endColumn": 60,
        "path": "py_app\\src\\ChatGPT\\FloydWarshall\\T9\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T1\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T1\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T1\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T1\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 8,
        "endLine": 7,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T1\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 10,
        "column": 16,
        "endLine": 10,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T1\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 8,
        "endLine": 16,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T1\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T10\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T10\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T10\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T10\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T10\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T10\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T10\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T10\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T10\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 10,
        "column": 16,
        "endLine": 10,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T10\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 8,
        "endLine": 17,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T10\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T11\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T11\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 10,
        "column": 16,
        "endLine": 10,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T11\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 8,
        "endLine": 19,
        "endColumn": 57,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T11\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T12\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T12\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T12\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T12\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T12\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T12\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 13,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T12\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T13\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T13\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T13\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T13\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T13\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T13\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 11,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T13\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T14\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T14\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T14\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T14\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T14\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T14\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 13,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T14\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T15\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (99/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T15\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T15\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T15\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (99/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T15\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T15\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T15\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T15\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 8,
        "endLine": 9,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T15\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 12,
        "column": 16,
        "endLine": 12,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T15\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 11,
        "column": 8,
        "endLine": 19,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T15\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T16\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T16\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T16\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T16\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T16\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T16\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 11,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T16\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T17\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T17\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T17\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T17\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T17\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T17\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 13,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T17\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T18\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T18\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T18\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T18\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T18\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T18\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 13,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T18\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T19\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T19\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T19\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T19\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T19\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T19\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 13,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T19\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T2\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T2\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.__init__",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T2\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 8,
        "endLine": 9,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T2\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 13,
        "column": 16,
        "endLine": 13,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T2\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 12,
        "column": 8,
        "endLine": 20,
        "endColumn": 57,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T2\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T20\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T20\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T20\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T20\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T20\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T20\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 13,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T20\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T21\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T21\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T21\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T21\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T21\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T21\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 13,
        "column": 16,
        "endLine": 13,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T21\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 12,
        "column": 8,
        "endLine": 20,
        "endColumn": 83,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T21\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T22\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T22\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T22\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T22\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T22\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T22\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 11,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T22\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T23\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T23\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T23\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T23\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 8,
        "endLine": 7,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T23\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 10,
        "column": 16,
        "endLine": 10,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T23\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 8,
        "endLine": 16,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T23\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T24\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T24\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T24\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T24\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T24\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T24\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T24\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T24\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 8,
        "endLine": 9,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T24\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 12,
        "column": 16,
        "endLine": 12,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T24\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 11,
        "column": 8,
        "endLine": 19,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T24\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T25\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T25\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T25\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T25\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T25\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T25\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 13,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T25\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T26\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T26\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (116/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T26\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T26\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T26\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T26\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (116/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T26\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T26\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T26\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T26\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 13,
        "column": 16,
        "endLine": 13,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T26\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 12,
        "column": 8,
        "endLine": 20,
        "endColumn": 57,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T26\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T27\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (116/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T27\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (116/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T27\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T27\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 10,
        "column": 16,
        "endLine": 10,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T27\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 8,
        "endLine": 14,
        "endColumn": 57,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T27\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T28\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (120/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T28\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (120/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.__init__",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 14,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T28\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.__init__",
        "line": 7,
        "column": 8,
        "endLine": 7,
        "endColumn": 15,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T28\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.__init__",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T28\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 11,
        "column": 16,
        "endLine": 11,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T28\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 10,
        "column": 8,
        "endLine": 15,
        "endColumn": 53,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T28\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T29\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T29\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T29\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T29\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T29\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T29\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 11,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T29\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T3\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T3\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T3\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T3\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T3\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T3\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 8,
        "endLine": 7,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T3\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 10,
        "column": 16,
        "endLine": 10,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T3\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 8,
        "endLine": 14,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T3\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T30\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T30\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T30\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T30\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T30\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T30\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T30\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T30\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 8,
        "endLine": 5,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T30\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 16,
        "endLine": 9,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T30\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 8,
        "column": 8,
        "endLine": 17,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T30\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T31\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T31\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T31\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T31\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T31\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T31\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T31\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T31\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 8,
        "endLine": 9,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T31\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 12,
        "column": 16,
        "endLine": 12,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T31\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 11,
        "column": 8,
        "endLine": 19,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T31\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T32\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T32\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T32\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T32\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 8,
        "endLine": 7,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T32\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 10,
        "column": 16,
        "endLine": 10,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T32\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 8,
        "endLine": 14,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T32\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T33\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T33\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T33\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T33\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T33\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T33\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 13,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T33\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T34\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T34\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T34\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T34\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T34\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T34\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 13,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T34\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T35\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T35\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T35\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T35\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 8,
        "endLine": 5,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T35\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 16,
        "endLine": 9,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T35\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 8,
        "column": 8,
        "endLine": 15,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T35\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T36\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T36\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T36\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T36\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 8,
        "endLine": 7,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T36\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 10,
        "column": 16,
        "endLine": 10,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T36\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 8,
        "endLine": 16,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T36\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T37\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T37\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T37\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T37\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T37\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T37\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T37\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T37\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 8,
        "column": 8,
        "endLine": 8,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T37\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 12,
        "column": 16,
        "endLine": 12,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T37\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 11,
        "column": 8,
        "endLine": 19,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T37\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T38\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T38\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T38\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T38\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T38\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T38\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 11,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T38\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T39\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T39\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T39\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T39\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 8,
        "endLine": 7,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T39\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 10,
        "column": 16,
        "endLine": 10,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T39\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 8,
        "endLine": 14,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T39\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T4\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T4\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T4\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T4\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T4\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T4\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 13,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T4\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T40\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T40\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T40\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T40\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T40\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T40\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 11,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T40\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T41\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T41\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T41\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T41\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T41\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T41\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 11,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T41\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T42\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T42\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T42\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T42\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T42\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T42\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T42\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 16,
        "endLine": 9,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T42\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 8,
        "column": 8,
        "endLine": 16,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T42\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T43\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T43\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T43\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T43\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T43\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T43\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 13,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T43\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T44\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T44\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T44\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T44\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T44\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T44\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 11,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T44\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T45\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T45\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T45\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T45\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T45\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T45\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 8,
        "endLine": 9,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T45\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 13,
        "column": 16,
        "endLine": 13,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T45\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 12,
        "column": 8,
        "endLine": 22,
        "endColumn": 95,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T45\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T46\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T46\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T46\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T46\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 8,
        "endLine": 7,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T46\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 10,
        "column": 16,
        "endLine": 10,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T46\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 8,
        "endLine": 14,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T46\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T47\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T47\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T47\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T47\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T47\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T47\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 11,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T47\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T48\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T48\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T48\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T48\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T48\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T48\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 13,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T48\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T49\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T49\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T49\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T49\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T49\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T49\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 11,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T49\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T5\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T5\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T5\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T5\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T5\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T5\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 11,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T5\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T50\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T50\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T50\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T50\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T50\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T50\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T50\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T50\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T50\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T50\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 13,
        "column": 16,
        "endLine": 13,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T50\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 12,
        "column": 8,
        "endLine": 22,
        "endColumn": 83,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T50\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T6\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T6\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (98/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T6\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T6\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T6\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (98/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T6\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T6\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T6\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 8,
        "endLine": 9,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T6\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 12,
        "column": 16,
        "endLine": 12,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T6\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 11,
        "column": 8,
        "endLine": 21,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T6\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T7\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T7\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T7\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T7\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T7\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T7\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 8,
        "endLine": 7,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T7\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 10,
        "column": 16,
        "endLine": 10,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T7\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 8,
        "endLine": 14,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T7\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T8\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T8\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T8\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T8\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 8,
        "endLine": 7,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T8\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 10,
        "column": 16,
        "endLine": 10,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T8\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 8,
        "endLine": 14,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T8\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T9\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T9\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T9\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 9,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T9\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 8,
        "endLine": 7,
        "endColumn": 10,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T9\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 10,
        "column": 16,
        "endLine": 10,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T9\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 8,
        "endLine": 14,
        "endColumn": 43,
        "path": "py_app\\src\\ChatGPT\\Knapsack\\T9\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T1\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 28,
        "endLine": 16,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T1\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 31,
        "endLine": 16,
        "endColumn": 32,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T1\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 4,
        "endLine": 16,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T1\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 21,
        "column": 4,
        "endLine": 21,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T1\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T10\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 28,
        "endLine": 16,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T10\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 31,
        "endLine": 16,
        "endColumn": 32,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T10\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 4,
        "endLine": 16,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T10\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 21,
        "column": 4,
        "endLine": 21,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T10\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 28,
        "column": 12,
        "endLine": 28,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T10\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 29,
        "column": 12,
        "endLine": 29,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T10\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T11\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T11\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T12\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 28,
        "endLine": 16,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T12\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 31,
        "endLine": 16,
        "endColumn": 32,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T12\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 4,
        "endLine": 16,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T12\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 21,
        "column": 4,
        "endLine": 21,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T12\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T13\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T13\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T13\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T13\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T13\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 39,
        "column": 12,
        "endLine": 39,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T13\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 40,
        "column": 12,
        "endLine": 40,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T13\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T14\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T14\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T14\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T14\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T14\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T15\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 28,
        "endLine": 16,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T15\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 31,
        "endLine": 16,
        "endColumn": 32,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T15\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 4,
        "endLine": 16,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T15\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 21,
        "column": 4,
        "endLine": 21,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T15\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 33,
        "column": 12,
        "endLine": 33,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T15\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 34,
        "column": 12,
        "endLine": 34,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T15\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T16\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T16\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T16\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T16\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T16\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 35,
        "column": 12,
        "endLine": 35,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T16\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 36,
        "column": 12,
        "endLine": 36,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T16\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T17\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T17\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T17\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T17\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T17\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T18\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 28,
        "endLine": 16,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T18\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 31,
        "endLine": 16,
        "endColumn": 32,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T18\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 4,
        "endLine": 16,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T18\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 21,
        "column": 4,
        "endLine": 21,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T18\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 28,
        "column": 12,
        "endLine": 28,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T18\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 29,
        "column": 12,
        "endLine": 29,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T18\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T19\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T19\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T19\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T2\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 28,
        "endLine": 16,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T2\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 31,
        "endLine": 16,
        "endColumn": 32,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T2\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 4,
        "endLine": 16,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T2\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 21,
        "column": 4,
        "endLine": 21,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T2\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 32,
        "column": 12,
        "endLine": 32,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T2\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 33,
        "column": 12,
        "endLine": 33,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T2\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T20\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 28,
        "endLine": 14,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T20\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 31,
        "endLine": 14,
        "endColumn": 32,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T20\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T20\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 19,
        "column": 4,
        "endLine": 19,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T20\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 27,
        "column": 12,
        "endLine": 27,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T20\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 28,
        "column": 12,
        "endLine": 28,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T20\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T21\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T21\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T21\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T21\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T21\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T22\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T22\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T23\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T23\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T23\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T23\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T23\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T24\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 28,
        "endLine": 16,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T24\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 31,
        "endLine": 16,
        "endColumn": 32,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T24\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 4,
        "endLine": 16,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T24\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 21,
        "column": 4,
        "endLine": 21,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T24\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T25\\kruskal.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T25\\kruskal.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T25\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T25\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T25\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T26\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T26\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T26\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T26\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T26\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 35,
        "column": 12,
        "endLine": 35,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T26\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 36,
        "column": 12,
        "endLine": 36,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T26\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T27\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T27\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T27\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T27\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T27\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 37,
        "column": 12,
        "endLine": 37,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T27\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 38,
        "column": 12,
        "endLine": 38,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T27\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T28\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T28\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T28\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T28\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T28\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T29\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 28,
        "endLine": 16,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T29\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 31,
        "endLine": 16,
        "endColumn": 32,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T29\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 4,
        "endLine": 16,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T29\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 21,
        "column": 4,
        "endLine": 21,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T29\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 31,
        "column": 12,
        "endLine": 31,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T29\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 32,
        "column": 12,
        "endLine": 32,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T29\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T3\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T3\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T3\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T3\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T3\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 38,
        "column": 12,
        "endLine": 38,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T3\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 39,
        "column": 12,
        "endLine": 39,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T3\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T30\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 28,
        "endLine": 16,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T30\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 31,
        "endLine": 16,
        "endColumn": 32,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T30\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 4,
        "endLine": 16,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T30\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 21,
        "column": 4,
        "endLine": 21,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T30\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 32,
        "column": 12,
        "endLine": 32,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T30\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 33,
        "column": 12,
        "endLine": 33,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T30\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T31\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T31\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T31\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T32\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T32\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T32\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T32\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T32\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 35,
        "column": 12,
        "endLine": 35,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T32\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 36,
        "column": 12,
        "endLine": 36,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T32\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T33\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T33\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T33\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T33\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T33\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 35,
        "column": 12,
        "endLine": 35,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T33\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 36,
        "column": 12,
        "endLine": 36,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T33\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T34\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T34\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T34\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T35\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T35\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T35\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T35\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T35\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T36\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 28,
        "endLine": 14,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T36\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 31,
        "endLine": 14,
        "endColumn": 32,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T36\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T36\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 19,
        "column": 4,
        "endLine": 19,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T36\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T37\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T37\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T37\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T38\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T38\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T38\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 33,
        "column": 8,
        "endLine": 44,
        "endColumn": 21,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T38\\kruskal.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T39\\kruskal.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T39\\kruskal.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T39\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T39\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T4\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 28,
        "endLine": 14,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T4\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 31,
        "endLine": 14,
        "endColumn": 32,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T4\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T4\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 19,
        "column": 4,
        "endLine": 19,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T4\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T40\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 28,
        "endLine": 14,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T40\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 31,
        "endLine": 14,
        "endColumn": 32,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T40\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T40\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 19,
        "column": 4,
        "endLine": 19,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T40\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T41\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 28,
        "endLine": 14,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T41\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 31,
        "endLine": 14,
        "endColumn": 32,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T41\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T41\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 19,
        "column": 4,
        "endLine": 19,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T41\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T42\\kruskal.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T42\\kruskal.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T42\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 28,
        "endLine": 16,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T42\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 31,
        "endLine": 16,
        "endColumn": 32,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T42\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 4,
        "endLine": 16,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T42\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 21,
        "column": 4,
        "endLine": 21,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T42\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T43\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T43\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T43\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T44\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 28,
        "endLine": 16,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T44\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 31,
        "endLine": 16,
        "endColumn": 32,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T44\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 4,
        "endLine": 16,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T44\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 21,
        "column": 4,
        "endLine": 21,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T44\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 29,
        "column": 12,
        "endLine": 29,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T44\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 30,
        "column": 12,
        "endLine": 30,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T44\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T45\\kruskal.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T45\\kruskal.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T45\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 28,
        "endLine": 16,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T45\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 31,
        "endLine": 16,
        "endColumn": 32,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T45\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 4,
        "endLine": 16,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T45\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 21,
        "column": 4,
        "endLine": 21,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T45\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T46\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T46\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T46\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T46\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T46\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 35,
        "column": 12,
        "endLine": 35,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T46\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 36,
        "column": 12,
        "endLine": 36,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T46\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T47\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T47\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T47\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T48\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T48\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T48\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T49\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T49\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T49\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T49\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T49\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 40,
        "column": 12,
        "endLine": 40,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T49\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 41,
        "column": 12,
        "endLine": 41,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T49\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T5\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T5\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T50\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T50\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T50\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T50\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T50\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T6\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T6\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T6\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T6\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T6\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 35,
        "column": 12,
        "endLine": 35,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T6\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 36,
        "column": 12,
        "endLine": 36,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T6\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T7\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 28,
        "endLine": 16,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T7\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 31,
        "endLine": 16,
        "endColumn": 32,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T7\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 16,
        "column": 4,
        "endLine": 16,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T7\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 21,
        "column": 4,
        "endLine": 21,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T7\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 28,
        "column": 12,
        "endLine": 28,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T7\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 29,
        "column": 12,
        "endLine": 29,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T7\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T8\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T8\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T8\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T8\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T8\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 35,
        "column": 12,
        "endLine": 35,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T8\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 36,
        "column": 12,
        "endLine": 36,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T8\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T9\\kruskal.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T9\\kruskal.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T9\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T9\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T9\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T9\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T9\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 35,
        "column": 12,
        "endLine": 35,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T9\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 36,
        "column": 12,
        "endLine": 36,
        "endColumn": 13,
        "path": "py_app\\src\\ChatGPT\\Kruskal\\T9\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\MergeSort\\T11\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\MergeSort\\T11\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 3,
        "column": 8,
        "endLine": 30,
        "endColumn": 22,
        "path": "py_app\\src\\ChatGPT\\MergeSort\\T14\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 3,
        "column": 8,
        "endLine": 33,
        "endColumn": 22,
        "path": "py_app\\src\\ChatGPT\\MergeSort\\T2\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 3,
        "column": 8,
        "endLine": 32,
        "endColumn": 22,
        "path": "py_app\\src\\ChatGPT\\MergeSort\\T24\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 3,
        "column": 8,
        "endLine": 33,
        "endColumn": 22,
        "path": "py_app\\src\\ChatGPT\\MergeSort\\T27\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 3,
        "column": 8,
        "endLine": 33,
        "endColumn": 22,
        "path": "py_app\\src\\ChatGPT\\MergeSort\\T35\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 3,
        "column": 8,
        "endLine": 31,
        "endColumn": 22,
        "path": "py_app\\src\\ChatGPT\\MergeSort\\T50\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 3,
        "column": 8,
        "endLine": 30,
        "endColumn": 22,
        "path": "py_app\\src\\ChatGPT\\MergeSort\\T8\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 3,
        "column": 8,
        "endLine": 32,
        "endColumn": 22,
        "path": "py_app\\src\\ChatGPT\\MergeSort\\T9\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T1\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T1\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._quick_sort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T10\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._partition",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T10\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._quick_sort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T11\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._partition",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T11\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T12\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T12\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._quick_sort",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T12\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._partition",
        "line": 16,
        "column": 4,
        "endLine": 16,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T12\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._quick_sort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T13\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._partition",
        "line": 17,
        "column": 4,
        "endLine": 17,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T13\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T14\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T14\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._quick_sort",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T16\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._partition",
        "line": 16,
        "column": 4,
        "endLine": 16,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T16\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._quick_sort",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T17\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._partition",
        "line": 13,
        "column": 4,
        "endLine": 13,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T17\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T19\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T19\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._quick_sort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T20\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._partition",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T20\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._quick_sort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T22\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._partition",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T22\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T23\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T23\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T24\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T24\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._quick_sort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T26\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._partition",
        "line": 17,
        "column": 4,
        "endLine": 17,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T26\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.sort",
        "line": 3,
        "column": 8,
        "endLine": 14,
        "endColumn": 63,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T27\\quick_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._quick_sort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T29\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._partition",
        "line": 15,
        "column": 4,
        "endLine": 15,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T29\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 6,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T3\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 6,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T3\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._quick_sort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T32\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._partition",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T32\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._quick_sort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T33\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._partition",
        "line": 17,
        "column": 4,
        "endLine": 17,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T33\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T34\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 15,
        "column": 4,
        "endLine": 15,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T34\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.sort",
        "line": 3,
        "column": 8,
        "endLine": 22,
        "endColumn": 59,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T36\\quick_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T4\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T4\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._quick_sort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T41\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._partition",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T41\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T42\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T42\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T42\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T42\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._quick_sort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T43\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._partition",
        "line": 15,
        "column": 4,
        "endLine": 15,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T43\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._quicksort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T44\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._partition",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T44\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._quick_sort",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T45\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._partition",
        "line": 13,
        "column": 4,
        "endLine": 13,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T45\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T46\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 17,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T46\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T47\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (98/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T47\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (98/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._quick_sort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T49\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._partition",
        "line": 17,
        "column": 4,
        "endLine": 17,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T49\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._quicksort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T5\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._partition",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T5\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._quick_sort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 19,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T6\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort._partition",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 18,
        "path": "py_app\\src\\ChatGPT\\QuickSort\\T6\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T1\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T1\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T1\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T1\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T1\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 12,
        "column": 8,
        "endLine": 15,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T1\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T10\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T10\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T10\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T10\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T10\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T10\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T11\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T11\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T11\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T11\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T11\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 14,
        "column": 8,
        "endLine": 17,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T11\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T12\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T12\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T12\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T12\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.__init__",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T12\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T12\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 14,
        "column": 8,
        "endLine": 17,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T12\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T13\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T13\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T13\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T13\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T13\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T13\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T14\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T14\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T14\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T14\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T14\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T14\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T15\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T15\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T15\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T15\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.__init__",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T15\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"V\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T15\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 17,
        "column": 8,
        "endLine": 20,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T15\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T16\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T16\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T16\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T16\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T16\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T16\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T17\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T17\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T17\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T17\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.__init__",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T17\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"V\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T17\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 71,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T17\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T18\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T18\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T18\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T18\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T18\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T18\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T19\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T19\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T19\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T19\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T19\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T19\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T2\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T2\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T2\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T2\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.__init__",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T2\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"V\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T2\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 10,
        "column": 8,
        "endLine": 13,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T2\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T20\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T20\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T20\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T20\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T20\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T20\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T21\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T21\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T21\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T21\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T21\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T21\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T22\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T22\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T22\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T22\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.__init__",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T22\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"V\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T22\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 8,
        "endLine": 19,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T22\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T23\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T23\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T23\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T23\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T23\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T23\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T24\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T24\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T24\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T24\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T24\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 12,
        "column": 8,
        "endLine": 15,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T24\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T25\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (99/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 33,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T25\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T25\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (99/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 33,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T25\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T25\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 20,
        "column": 16,
        "endLine": 20,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T25\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 21,
        "column": 16,
        "endLine": 21,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T25\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 22,
        "column": 16,
        "endLine": 22,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T25\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 18,
        "column": 8,
        "endLine": 26,
        "endColumn": 38,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T25\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 29,
        "column": 12,
        "endLine": 29,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T25\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 30,
        "column": 12,
        "endLine": 30,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T25\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 31,
        "column": 12,
        "endLine": 31,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T25\\bellman_ford.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T26\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T26\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T26\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T26\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T26\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T26\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T27\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T27\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T27\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T27\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T27\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T27\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T28\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T28\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T28\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T28\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T28\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T28\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T29\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T29\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T29\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T29\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T29\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T29\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T3\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T3\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T3\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T3\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T3\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T3\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T30\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T30\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T30\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T30\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T30\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 12,
        "column": 8,
        "endLine": 15,
        "endColumn": 71,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T30\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T31\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T31\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T31\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T31\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T31\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 8,
        "endLine": 20,
        "endColumn": 53,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T31\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T32\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T32\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T32\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T32\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T32\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 8,
        "endLine": 20,
        "endColumn": 53,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T32\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T33\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (124/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T33\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T33\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (120/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T33\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (124/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T33\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T33\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (120/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T33\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 81,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T33\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T34\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T34\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T34\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T34\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T34\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T34\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T35\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T35\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T35\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T35\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T35\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T35\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T36\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T36\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T36\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T36\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T36\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 71,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T36\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T37\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (98/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T37\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T37\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T37\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (98/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T37\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T37\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T37\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 8,
        "endLine": 20,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T37\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T38\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T38\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T38\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T38\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T38\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T38\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T39\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T39\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T39\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T39\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T39\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T39\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T4\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T4\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T4\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T4\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T4\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 12,
        "column": 8,
        "endLine": 15,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T4\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T40\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T40\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T40\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T40\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T40\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T40\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T41\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T41\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T41\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T41\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T41\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T41\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T42\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T42\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T42\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T42\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T42\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 19,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T42\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T43\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T43\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T43\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (108/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T43\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T43\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T43\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (108/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T43\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T43\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T44\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T44\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T44\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T44\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T44\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 12,
        "column": 8,
        "endLine": 15,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T44\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T45\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T45\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T45\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T45\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T45\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 14,
        "column": 8,
        "endLine": 17,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T45\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T46\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (98/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T46\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T46\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (98/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T46\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 2,
        "endLine": 6,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T46\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 13,
        "column": 4,
        "endLine": 16,
        "endColumn": 59,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T46\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T47\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T47\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T47\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T47\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T47\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 18,
        "column": 8,
        "endLine": 21,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T47\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T48\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T48\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T48\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T48\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T48\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 8,
        "endLine": 20,
        "endColumn": 53,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T48\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T49\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T49\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T49\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T49\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T49\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T49\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T5\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T5\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T5\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T5\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T5\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 8,
        "endLine": 20,
        "endColumn": 53,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T5\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T50\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T50\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T50\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T50\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T50\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 12,
        "column": 8,
        "endLine": 15,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T50\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T6\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T6\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T6\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T6\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T6\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 16,
        "column": 8,
        "endLine": 19,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T6\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T7\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T7\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T7\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T7\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T7\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T7\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T8\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T8\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T8\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T8\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T8\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 71,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T8\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T9\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T9\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T9\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (106/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "bellman_ford",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T9\\bellman_ford.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T9\\bellman_ford.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "bellman_ford",
        "obj": "BellmanFord.bellman_ford",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BellmanFord\\T9\\bellman_ford.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "binary_search",
        "obj": "BinarySearch.binary_search",
        "line": 4,
        "column": 8,
        "endLine": 14,
        "endColumn": 73,
        "path": "py_app\\src\\Copilot\\BinarySearch\\T16\\binary_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "binary_search",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BinarySearch\\T20\\binary_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_search",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BinarySearch\\T20\\binary_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "binary_search",
        "obj": "BinarySearch.binary_search",
        "line": 7,
        "column": 8,
        "endLine": 17,
        "endColumn": 81,
        "path": "py_app\\src\\Copilot\\BinarySearch\\T20\\binary_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "binary_search",
        "obj": "BinarySearch.binary_search",
        "line": 4,
        "column": 8,
        "endLine": 14,
        "endColumn": 74,
        "path": "py_app\\src\\Copilot\\BinarySearch\\T22\\binary_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "binary_search",
        "obj": "BinarySearch.binary_search",
        "line": 4,
        "column": 8,
        "endLine": 14,
        "endColumn": 69,
        "path": "py_app\\src\\Copilot\\BinarySearch\\T23\\binary_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "binary_search",
        "obj": "BinarySearch.binary_search",
        "line": 8,
        "column": 8,
        "endLine": 16,
        "endColumn": 40,
        "path": "py_app\\src\\Copilot\\BinarySearch\\T28\\binary_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "binary_search",
        "obj": "BinarySearch.binary_search",
        "line": 4,
        "column": 8,
        "endLine": 14,
        "endColumn": 73,
        "path": "py_app\\src\\Copilot\\BinarySearch\\T32\\binary_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "binary_search",
        "obj": "BinarySearch.binary_search",
        "line": 4,
        "column": 8,
        "endLine": 14,
        "endColumn": 66,
        "path": "py_app\\src\\Copilot\\BinarySearch\\T34\\binary_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "binary_search",
        "obj": "BinarySearch.binary_search",
        "line": 4,
        "column": 4,
        "endLine": 14,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\BinarySearch\\T39\\binary_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "binary_search",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BinarySearch\\T40\\binary_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_search",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BinarySearch\\T40\\binary_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_search",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BinarySearch\\T40\\binary_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_search",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BinarySearch\\T40\\binary_search.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "binary_search",
        "obj": "BinarySearch.binary_search",
        "line": 4,
        "column": 8,
        "endLine": 14,
        "endColumn": 90,
        "path": "py_app\\src\\Copilot\\BinarySearch\\T40\\binary_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "binary_search",
        "obj": "BinarySearch.binary_search",
        "line": 7,
        "column": 8,
        "endLine": 15,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\BinarySearch\\T47\\binary_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "binary_search",
        "obj": "BinarySearch.binary_search_recursive",
        "line": 10,
        "column": 4,
        "endLine": 10,
        "endColumn": 31,
        "path": "py_app\\src\\Copilot\\BinarySearch\\T6\\binary_search.py",
        "symbol": "invalid-name",
        "message": "Method name \"binary_search_recursive\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "binary_search",
        "obj": "BinarySearch.binary_search_recursive",
        "line": 10,
        "column": 4,
        "endLine": 10,
        "endColumn": 31,
        "path": "py_app\\src\\Copilot\\BinarySearch\\T6\\binary_search.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "binary_search",
        "obj": "BinarySearch.binary_search_iterative",
        "line": 23,
        "column": 4,
        "endLine": 23,
        "endColumn": 31,
        "path": "py_app\\src\\Copilot\\BinarySearch\\T6\\binary_search.py",
        "symbol": "invalid-name",
        "message": "Method name \"binary_search_iterative\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "binary_search",
        "obj": "BinarySearch.binary_search_helper",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 28,
        "path": "py_app\\src\\Copilot\\BinarySearch\\T7\\binary_search.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 5,
        "column": 15,
        "endLine": 5,
        "endColumn": 31,
        "path": "py_app\\src\\Copilot\\BinaryToDecimal\\T17\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '1'.",
        "message-id": "R2004"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 6,
        "column": 15,
        "endLine": 6,
        "endColumn": 31,
        "path": "py_app\\src\\Copilot\\BinaryToDecimal\\T20\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '1'.",
        "message-id": "R2004"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BinaryToDecimal\\T26\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "binary_to_decimal",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BinaryToDecimal\\T26\\binary_to_decimal.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 9,
        "column": 15,
        "endLine": 9,
        "endColumn": 31,
        "path": "py_app\\src\\Copilot\\BinaryToDecimal\\T26\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '1'.",
        "message-id": "R2004"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 10,
        "column": 15,
        "endLine": 10,
        "endColumn": 34,
        "path": "py_app\\src\\Copilot\\BinaryToDecimal\\T33\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '0'.",
        "message-id": "R2004"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 10,
        "column": 39,
        "endLine": 10,
        "endColumn": 58,
        "path": "py_app\\src\\Copilot\\BinaryToDecimal\\T33\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '1'.",
        "message-id": "R2004"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 6,
        "column": 15,
        "endLine": 6,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\BinaryToDecimal\\T4\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '1'.",
        "message-id": "R2004"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 10,
        "column": 15,
        "endLine": 10,
        "endColumn": 31,
        "path": "py_app\\src\\Copilot\\BinaryToDecimal\\T6\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '1'.",
        "message-id": "R2004"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 6,
        "column": 15,
        "endLine": 6,
        "endColumn": 31,
        "path": "py_app\\src\\Copilot\\BinaryToDecimal\\T8\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '1'.",
        "message-id": "R2004"
    },
    {
        "type": "refactor",
        "module": "binary_to_decimal",
        "obj": "BinaryToDecimal.convert_to_decimal",
        "line": 9,
        "column": 15,
        "endLine": 9,
        "endColumn": 31,
        "path": "py_app\\src\\Copilot\\BinaryToDecimal\\T9\\binary_to_decimal.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '1'.",
        "message-id": "R2004"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 14,
        "column": 12,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T1\\graph.py",
        "symbol": "invalid-name",
        "message": "Variable name \"s\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 13,
        "column": 8,
        "endLine": 19,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T1\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 23,
        "endLine": 6,
        "endColumn": 24,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T10\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 26,
        "endLine": 6,
        "endColumn": 27,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T10\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 15,
        "column": 8,
        "endLine": 21,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T10\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 23,
        "endLine": 6,
        "endColumn": 24,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T11\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 26,
        "endLine": 6,
        "endColumn": 27,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T11\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 14,
        "column": 8,
        "endLine": 20,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T11\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 12,
        "column": 8,
        "endLine": 17,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T12\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 11,
        "column": 8,
        "endLine": 17,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T13\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 13,
        "column": 8,
        "endLine": 18,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T14\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 23,
        "endLine": 6,
        "endColumn": 24,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T15\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 26,
        "endLine": 6,
        "endColumn": 27,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T15\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 16,
        "column": 8,
        "endLine": 22,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T15\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 23,
        "endLine": 6,
        "endColumn": 24,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T16\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 26,
        "endLine": 6,
        "endColumn": 27,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T16\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 17,
        "column": 12,
        "endLine": 17,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T16\\graph.py",
        "symbol": "invalid-name",
        "message": "Variable name \"s\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 16,
        "column": 8,
        "endLine": 22,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T16\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 12,
        "column": 8,
        "endLine": 18,
        "endColumn": 44,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T17\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 10,
        "column": 8,
        "endLine": 15,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T18\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 14,
        "column": 12,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T19\\graph.py",
        "symbol": "invalid-name",
        "message": "Variable name \"s\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 13,
        "column": 8,
        "endLine": 18,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T19\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 21,
        "column": 23,
        "endLine": 21,
        "endColumn": 24,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T19\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 21,
        "column": 26,
        "endLine": 21,
        "endColumn": 27,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T19\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 9,
        "column": 8,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T2\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 17,
        "column": 23,
        "endLine": 17,
        "endColumn": 25,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T2\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v1\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 17,
        "column": 27,
        "endLine": 17,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T2\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v2\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T20\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 23,
        "endLine": 6,
        "endColumn": 24,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T21\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 26,
        "endLine": 6,
        "endColumn": 27,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T21\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 15,
        "column": 8,
        "endLine": 21,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T21\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 23,
        "endLine": 6,
        "endColumn": 24,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T22\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 26,
        "endLine": 6,
        "endColumn": 27,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T22\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 15,
        "column": 8,
        "endLine": 21,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T22\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 7,
        "column": 23,
        "endLine": 7,
        "endColumn": 24,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T23\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 7,
        "column": 26,
        "endLine": 7,
        "endColumn": 27,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T23\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 15,
        "column": 8,
        "endLine": 21,
        "endColumn": 42,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T23\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 23,
        "endLine": 6,
        "endColumn": 24,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T24\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 26,
        "endLine": 6,
        "endColumn": 27,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T24\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 15,
        "column": 8,
        "endLine": 21,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T24\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 10,
        "column": 8,
        "endLine": 15,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T25\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 12,
        "column": 8,
        "endLine": 18,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T26\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 9,
        "column": 8,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T27\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 11,
        "column": 8,
        "endLine": 16,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T28\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 12,
        "column": 12,
        "endLine": 12,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T3\\graph.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 11,
        "column": 8,
        "endLine": 16,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T3\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 23,
        "endLine": 6,
        "endColumn": 24,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T30\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 26,
        "endLine": 6,
        "endColumn": 27,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T30\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 14,
        "column": 8,
        "endLine": 20,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T30\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 12,
        "column": 8,
        "endLine": 18,
        "endColumn": 34,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T31\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 21,
        "column": 23,
        "endLine": 21,
        "endColumn": 25,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T31\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v1\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 21,
        "column": 27,
        "endLine": 21,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T31\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v2\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 23,
        "endLine": 8,
        "endColumn": 24,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T33\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T33\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 24,
        "column": 8,
        "endLine": 36,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T33\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 23,
        "endLine": 6,
        "endColumn": 24,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T34\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 26,
        "endLine": 6,
        "endColumn": 27,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T34\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 9,
        "column": 18,
        "endLine": 9,
        "endColumn": 19,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T34\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"s\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 14,
        "column": 8,
        "endLine": 20,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T34\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 23,
        "endLine": 6,
        "endColumn": 24,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T35\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 26,
        "endLine": 6,
        "endColumn": 27,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T35\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 17,
        "column": 12,
        "endLine": 17,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T35\\graph.py",
        "symbol": "invalid-name",
        "message": "Variable name \"s\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 16,
        "column": 8,
        "endLine": 22,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T35\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.Graph.bfs",
        "line": 13,
        "column": 16,
        "endLine": 13,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T36\\graph.py",
        "symbol": "invalid-name",
        "message": "Variable name \"s\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.Graph.bfs",
        "line": 12,
        "column": 12,
        "endLine": 18,
        "endColumn": 41,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T36\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 11,
        "column": 8,
        "endLine": 16,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T37\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 15,
        "column": 8,
        "endLine": 21,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T38\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 10,
        "column": 8,
        "endLine": 15,
        "endColumn": 51,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T39\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 23,
        "endLine": 6,
        "endColumn": 24,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T4\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 26,
        "endLine": 6,
        "endColumn": 27,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T4\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 15,
        "column": 8,
        "endLine": 21,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T4\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 11,
        "column": 12,
        "endLine": 11,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T40\\graph.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 9,
        "column": 8,
        "endLine": 14,
        "endColumn": 42,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T41\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 23,
        "endLine": 6,
        "endColumn": 24,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T42\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 26,
        "endLine": 6,
        "endColumn": 27,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T42\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T42\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 11,
        "column": 8,
        "endLine": 17,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T43\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 11,
        "column": 8,
        "endLine": 17,
        "endColumn": 42,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T44\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 9,
        "column": 8,
        "endLine": 14,
        "endColumn": 42,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T45\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 11,
        "column": 8,
        "endLine": 16,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T46\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 19,
        "column": 23,
        "endLine": 19,
        "endColumn": 25,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T46\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v1\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 19,
        "column": 27,
        "endLine": 19,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T46\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v2\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 12,
        "column": 8,
        "endLine": 18,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T47\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 12,
        "column": 8,
        "endLine": 18,
        "endColumn": 42,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T48\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T49\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T49\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T49\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T49\\graph.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 12,
        "column": 8,
        "endLine": 19,
        "endColumn": 42,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T49\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 21,
        "column": 23,
        "endLine": 21,
        "endColumn": 25,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T49\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v1\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 21,
        "column": 27,
        "endLine": 21,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T49\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v2\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 11,
        "column": 8,
        "endLine": 17,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T5\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 11,
        "column": 8,
        "endLine": 17,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T50\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 23,
        "endLine": 6,
        "endColumn": 24,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T6\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 26,
        "endLine": 6,
        "endColumn": 27,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T6\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 17,
        "column": 8,
        "endLine": 24,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T6\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 7,
        "column": 23,
        "endLine": 7,
        "endColumn": 24,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T7\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 7,
        "column": 26,
        "endLine": 7,
        "endColumn": 27,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T7\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 15,
        "column": 8,
        "endLine": 21,
        "endColumn": 44,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T7\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 23,
        "endLine": 6,
        "endColumn": 24,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T8\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.add_edge",
        "line": 6,
        "column": 26,
        "endLine": 6,
        "endColumn": 27,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T8\\graph.py",
        "symbol": "invalid-name",
        "message": "Argument name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 17,
        "column": 12,
        "endLine": 17,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T8\\graph.py",
        "symbol": "invalid-name",
        "message": "Variable name \"s\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 16,
        "column": 8,
        "endLine": 22,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T8\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "graph",
        "obj": "Graph.bfs",
        "line": 12,
        "column": 8,
        "endLine": 18,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\BreadthFirstSearch\\T9\\graph.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 50,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T1\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 13,
        "column": 8,
        "endLine": 18,
        "endColumn": 47,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T10\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 13,
        "column": 8,
        "endLine": 17,
        "endColumn": 34,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T11\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 21,
        "endColumn": 47,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T12\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 13,
        "column": 8,
        "endLine": 19,
        "endColumn": 46,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T13\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 16,
        "column": 8,
        "endLine": 23,
        "endColumn": 44,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T15\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 17,
        "endColumn": 31,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T17\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 17,
        "endColumn": 34,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T18\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 18,
        "column": 8,
        "endLine": 27,
        "endColumn": 43,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T19\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs_recursive",
        "line": 15,
        "column": 4,
        "endLine": 15,
        "endColumn": 21,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T2\\depth_first_search.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 47,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T20\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 34,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T21\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 20,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T23\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 50,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T24\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 20,
        "endColumn": 46,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T25\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 13,
        "column": 8,
        "endLine": 20,
        "endColumn": 31,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T27\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 21,
        "endColumn": 46,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T28\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 17,
        "column": 16,
        "endLine": 17,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T29\\depth_first_search.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 20,
        "endColumn": 37,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T29\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 13,
        "column": 8,
        "endLine": 20,
        "endColumn": 31,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T31\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 21,
        "endColumn": 46,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T32\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 20,
        "endColumn": 46,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T33\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs_recursive",
        "line": 28,
        "column": 8,
        "endLine": 34,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T34\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 13,
        "column": 8,
        "endLine": 19,
        "endColumn": 46,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T35\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 12,
        "column": 8,
        "endLine": 18,
        "endColumn": 47,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T36\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 13,
        "column": 8,
        "endLine": 18,
        "endColumn": 47,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T37\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 17,
        "column": 8,
        "endLine": 22,
        "endColumn": 42,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T38\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 13,
        "column": 8,
        "endLine": 19,
        "endColumn": 46,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T39\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 19,
        "column": 8,
        "endLine": 24,
        "endColumn": 47,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T41\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 21,
        "endColumn": 46,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T42\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 13,
        "column": 8,
        "endLine": 19,
        "endColumn": 47,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T43\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 13,
        "column": 8,
        "endLine": 19,
        "endColumn": 42,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T44\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 13,
        "column": 8,
        "endLine": 18,
        "endColumn": 50,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T45\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 11,
        "column": 8,
        "endLine": 16,
        "endColumn": 42,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T46\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 14,
        "column": 8,
        "endLine": 20,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T49\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 21,
        "endColumn": 46,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T5\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 50,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T50\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 18,
        "column": 8,
        "endLine": 23,
        "endColumn": 48,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T7\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 18,
        "column": 8,
        "endLine": 23,
        "endColumn": 42,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T8\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "depth_first_search",
        "obj": "DepthFirstSearch.dfs",
        "line": 13,
        "column": 8,
        "endLine": 17,
        "endColumn": 34,
        "path": "py_app\\src\\Copilot\\DepthFirstSearch\\T9\\depth_first_search.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T1\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T1\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (181/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T1\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (110/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T1\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T1\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (181/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T1\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (110/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T1\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 13,
        "column": 8,
        "endLine": 23,
        "endColumn": 110,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T1\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 13,
        "column": 8,
        "endLine": 23,
        "endColumn": 110,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T1\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T10\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T10\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (116/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T10\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T10\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (116/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T10\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 12,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T10\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 16,
        "column": 16,
        "endLine": 16,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T10\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 13,
        "column": 8,
        "endLine": 18,
        "endColumn": 64,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T10\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.min_distance",
        "line": 24,
        "column": 12,
        "endLine": 24,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T10\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T11\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T11\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (132/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T11\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T11\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T11\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (132/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T11\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T11\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_path",
        "line": 16,
        "column": 8,
        "endLine": 25,
        "endColumn": 80,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T11\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_path",
        "line": 16,
        "column": 8,
        "endLine": 25,
        "endColumn": 80,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T11\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T12\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (143/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T12\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T12\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (143/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T12\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T12\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 17,
        "column": 16,
        "endLine": 17,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T12\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 15,
        "column": 8,
        "endLine": 25,
        "endColumn": 80,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T12\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 23,
        "column": 16,
        "endLine": 23,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T12\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 15,
        "column": 8,
        "endLine": 25,
        "endColumn": 80,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T12\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 28,
        "column": 12,
        "endLine": 28,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T12\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T13\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (124/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T13\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T13\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (124/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T13\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T13\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 13,
        "column": 8,
        "endLine": 16,
        "endColumn": 81,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T13\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T14\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T14\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (128/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T14\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T14\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (128/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T14\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 12,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T14\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 16,
        "column": 16,
        "endLine": 16,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T14\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 13,
        "column": 8,
        "endLine": 18,
        "endColumn": 74,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T14\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.min_distance",
        "line": 23,
        "column": 12,
        "endLine": 23,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T14\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T15\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T15\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (132/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T15\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T15\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T15\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (132/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T15\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T15\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 18,
        "column": 16,
        "endLine": 18,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T15\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 15,
        "column": 8,
        "endLine": 25,
        "endColumn": 80,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T15\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 23,
        "column": 16,
        "endLine": 23,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T15\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 15,
        "column": 8,
        "endLine": 25,
        "endColumn": 80,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T15\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 28,
        "column": 12,
        "endLine": 28,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T15\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 5,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T16\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T16\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (137/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T16\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 5,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T16\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T16\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (137/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T16\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T16\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 8,
        "endLine": 23,
        "endColumn": 80,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T16\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 8,
        "endLine": 23,
        "endColumn": 80,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T16\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T17\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (125/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T17\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (125/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T17\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 8,
        "endLine": 26,
        "endColumn": 72,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T17\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 8,
        "endLine": 26,
        "endColumn": 72,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T17\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T18\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T18\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T18\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.min_distance",
        "line": 11,
        "column": 12,
        "endLine": 11,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T18\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 22,
        "column": 12,
        "endLine": 22,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T18\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T19\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T19\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (116/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T19\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T19\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (116/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T19\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 12,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T19\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 16,
        "column": 16,
        "endLine": 16,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T19\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 13,
        "column": 8,
        "endLine": 18,
        "endColumn": 64,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T19\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.min_distance",
        "line": 24,
        "column": 12,
        "endLine": 24,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T19\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T2\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T2\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (147/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T2\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T2\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (147/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T2\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 17,
        "column": 16,
        "endLine": 17,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T2\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 15,
        "column": 8,
        "endLine": 27,
        "endColumn": 48,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T2\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 24,
        "column": 16,
        "endLine": 24,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T2\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 15,
        "column": 8,
        "endLine": 27,
        "endColumn": 48,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T2\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T20\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T20\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (132/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T20\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T20\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T20\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (132/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T20\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T20\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_path",
        "line": 16,
        "column": 8,
        "endLine": 25,
        "endColumn": 80,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T20\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_path",
        "line": 16,
        "column": 8,
        "endLine": 25,
        "endColumn": 80,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T20\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (108/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (108/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 12,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 16,
        "column": 16,
        "endLine": 16,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 13,
        "column": 8,
        "endLine": 18,
        "endColumn": 64,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 20,
        "column": 8,
        "endLine": 24,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra._min_distance",
        "line": 30,
        "column": 12,
        "endLine": 30,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T21\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T22\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T22\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T22\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T22\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T22\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T22\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T22\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T22\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T23\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T23\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T23\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (147/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T23\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T23\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T23\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T23\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (147/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T23\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T23\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 16,
        "column": 16,
        "endLine": 16,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T23\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 8,
        "endLine": 25,
        "endColumn": 80,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T23\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 23,
        "column": 16,
        "endLine": 23,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T23\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 8,
        "endLine": 25,
        "endColumn": 80,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T23\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T24\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 24,
        "column": 12,
        "endLine": 24,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T24\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T25\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T25\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (108/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T25\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T25\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T25\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (108/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T25\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T25\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 16,
        "column": 12,
        "endLine": 16,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T25\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 18,
        "column": 16,
        "endLine": 18,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T25\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 64,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T25\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra._min_distance",
        "line": 25,
        "column": 12,
        "endLine": 25,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T25\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T26\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T26\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T26\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (200/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T26\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (118/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T26\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T26\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T26\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (200/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T26\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (118/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T26\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 8,
        "endLine": 25,
        "endColumn": 118,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T26\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 8,
        "endLine": 25,
        "endColumn": 118,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T26\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T27\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T27\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (108/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T27\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T27\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (108/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T27\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 12,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T27\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 16,
        "column": 16,
        "endLine": 16,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T27\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 13,
        "column": 8,
        "endLine": 18,
        "endColumn": 64,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T27\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T28\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T28\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T28\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 19,
        "column": 8,
        "endLine": 33,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T28\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 19,
        "column": 8,
        "endLine": 33,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T28\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T29\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (136/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T29\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T29\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (136/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T29\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T29\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 13,
        "column": 8,
        "endLine": 13,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T29\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"sptSet\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 8,
        "endLine": 23,
        "endColumn": 80,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T29\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 8,
        "endLine": 23,
        "endColumn": 80,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T29\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 25,
        "column": 8,
        "endLine": 28,
        "endColumn": 43,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T29\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T3\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T3\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T3\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.min_distance",
        "line": 11,
        "column": 12,
        "endLine": 11,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T3\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 22,
        "column": 12,
        "endLine": 22,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T3\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T30\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T30\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T30\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T30\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T30\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T30\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T30\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T30\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (147/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (147/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 16,
        "column": 16,
        "endLine": 16,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 8,
        "endLine": 25,
        "endColumn": 80,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 23,
        "column": 16,
        "endLine": 23,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 8,
        "endLine": 25,
        "endColumn": 80,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T31\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 5,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T32\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T32\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 5,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T32\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T32\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T32\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 18,
        "column": 12,
        "endLine": 18,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T32\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 20,
        "column": 16,
        "endLine": 20,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T32\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 17,
        "column": 8,
        "endLine": 23,
        "endColumn": 51,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T32\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.min_distance",
        "line": 31,
        "column": 12,
        "endLine": 31,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T32\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 5,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T33\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T33\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 5,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T33\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T33\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (113/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T33\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 18,
        "column": 12,
        "endLine": 18,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T33\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 20,
        "column": 16,
        "endLine": 20,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T33\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 17,
        "column": 8,
        "endLine": 23,
        "endColumn": 51,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T33\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.min_distance",
        "line": 31,
        "column": 12,
        "endLine": 31,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T33\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T34\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T34\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (93/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T34\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 18,
        "column": 8,
        "endLine": 30,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T34\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T35\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T35\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (111/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T35\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T35\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (111/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T35\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.min_distance",
        "line": 12,
        "column": 12,
        "endLine": 12,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T35\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 23,
        "column": 12,
        "endLine": 23,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T35\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 25,
        "column": 16,
        "endLine": 25,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T35\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 22,
        "column": 8,
        "endLine": 27,
        "endColumn": 56,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T35\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T36\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (111/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T36\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T36\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (111/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T36\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 10,
        "column": 4,
        "endLine": 10,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T36\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 17,
        "column": 8,
        "endLine": 27,
        "endColumn": 82,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T36\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 17,
        "column": 8,
        "endLine": 27,
        "endColumn": 82,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T36\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T37\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (129/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T37\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (129/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T37\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 19,
        "column": 16,
        "endLine": 19,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T37\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 23,
        "column": 12,
        "endLine": 23,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T37\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 17,
        "column": 8,
        "endLine": 27,
        "endColumn": 56,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T37\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 25,
        "column": 16,
        "endLine": 25,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T37\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 17,
        "column": 8,
        "endLine": 27,
        "endColumn": 56,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T37\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T38\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T38\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (152/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T38\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T38\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T38\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (152/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T38\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T38\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 13,
        "column": 8,
        "endLine": 22,
        "endColumn": 84,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T38\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 13,
        "column": 8,
        "endLine": 22,
        "endColumn": 84,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T38\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T39\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T39\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (178/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T39\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (108/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T39\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T39\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T39\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (178/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T39\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (108/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T39\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T39\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 108,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T39\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T4\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T4\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T4\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (170/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T4\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 33,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T4\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T4\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T4\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T4\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (170/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T4\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 33,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T4\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T4\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 8,
        "endLine": 27,
        "endColumn": 102,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T4\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 8,
        "endLine": 27,
        "endColumn": 102,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T4\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T40\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T40\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.minDistance",
        "line": 7,
        "column": 32,
        "endLine": 7,
        "endColumn": 38,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T40\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Argument name \"sptSet\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.minDistance",
        "line": 9,
        "column": 12,
        "endLine": 9,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T40\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.dijkstra",
        "line": 18,
        "column": 8,
        "endLine": 18,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T40\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"sptSet\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.dijkstra",
        "line": 21,
        "column": 12,
        "endLine": 21,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T40\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.dijkstra",
        "line": 23,
        "column": 16,
        "endLine": 23,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T40\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.dijkstra",
        "line": 20,
        "column": 8,
        "endLine": 25,
        "endColumn": 56,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T40\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 28,
        "column": 4,
        "endLine": 28,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T40\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T41\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T41\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T41\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T41\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T41\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 13,
        "column": 8,
        "endLine": 13,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T41\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"sptSet\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 16,
        "column": 12,
        "endLine": 16,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T41\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 18,
        "column": 16,
        "endLine": 18,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T41\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 56,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T41\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.min_distance",
        "line": 24,
        "column": 33,
        "endLine": 24,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T41\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Argument name \"sptSet\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.min_distance",
        "line": 26,
        "column": 12,
        "endLine": 26,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T41\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T42\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (118/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T42\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (118/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 13,
        "column": 4,
        "endLine": 13,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T42\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 19,
        "column": 8,
        "endLine": 25,
        "endColumn": 118,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T42\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T43\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T43\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.__init__",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T43\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"V\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.min_distance",
        "line": 13,
        "column": 12,
        "endLine": 13,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T43\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.dijkstra",
        "line": 24,
        "column": 12,
        "endLine": 24,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T43\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.dijkstra",
        "line": 26,
        "column": 16,
        "endLine": 26,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T43\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.dijkstra",
        "line": 23,
        "column": 8,
        "endLine": 30,
        "endColumn": 56,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T43\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 33,
        "column": 4,
        "endLine": 33,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T43\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 41,
        "column": 12,
        "endLine": 41,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T43\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 43,
        "column": 16,
        "endLine": 43,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T43\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 40,
        "column": 8,
        "endLine": 47,
        "endColumn": 56,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T43\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T44\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T44\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T44\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T44\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T44\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 12,
        "column": 8,
        "endLine": 12,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T44\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"sptSet\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 12,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T44\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 16,
        "column": 16,
        "endLine": 16,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T44\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 13,
        "column": 8,
        "endLine": 18,
        "endColumn": 56,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T44\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.min_distance",
        "line": 21,
        "column": 33,
        "endLine": 21,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T44\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Argument name \"sptSet\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.min_distance",
        "line": 23,
        "column": 12,
        "endLine": 23,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T44\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T45\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T45\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T45\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T45\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T45\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 11,
        "column": 8,
        "endLine": 11,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T45\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"sptSet\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 13,
        "column": 12,
        "endLine": 13,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T45\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 15,
        "column": 16,
        "endLine": 15,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T45\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 12,
        "column": 8,
        "endLine": 17,
        "endColumn": 56,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T45\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.min_distance",
        "line": 19,
        "column": 33,
        "endLine": 19,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T45\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Argument name \"sptSet\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.min_distance",
        "line": 21,
        "column": 12,
        "endLine": 21,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T45\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T46\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T46\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (128/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T46\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T46\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (128/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T46\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.min_distance",
        "line": 13,
        "column": 12,
        "endLine": 13,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T46\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 22,
        "column": 12,
        "endLine": 22,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T46\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 24,
        "column": 16,
        "endLine": 24,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T46\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 21,
        "column": 8,
        "endLine": 26,
        "endColumn": 74,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T46\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T47\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T47\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T47\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (118/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T47\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T47\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T47\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (118/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T47\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 13,
        "column": 8,
        "endLine": 23,
        "endColumn": 118,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T47\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 13,
        "column": 8,
        "endLine": 23,
        "endColumn": 118,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T47\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T48\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 12,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T48\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 16,
        "column": 16,
        "endLine": 16,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T48\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 16,
        "column": 19,
        "endLine": 16,
        "endColumn": 20,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T48\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 13,
        "column": 8,
        "endLine": 18,
        "endColumn": 41,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T48\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T49\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T49\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T49\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T49\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T49\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 11,
        "column": 8,
        "endLine": 11,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T49\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"sptSet\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 13,
        "column": 12,
        "endLine": 13,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T49\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 15,
        "column": 16,
        "endLine": 15,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T49\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 12,
        "column": 8,
        "endLine": 17,
        "endColumn": 56,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T49\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.min_distance",
        "line": 19,
        "column": 33,
        "endLine": 19,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T49\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Argument name \"sptSet\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.min_distance",
        "line": 22,
        "column": 12,
        "endLine": 22,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T49\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T5\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T5\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (182/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T5\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (110/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T5\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T5\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (182/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T5\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (110/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T5\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 8,
        "endLine": 25,
        "endColumn": 110,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T5\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 8,
        "endLine": 25,
        "endColumn": 110,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T5\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T50\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T50\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T50\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T50\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T50\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 19,
        "column": 16,
        "endLine": 19,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T50\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 22,
        "column": 20,
        "endLine": 22,
        "endColumn": 21,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T50\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 17,
        "column": 8,
        "endLine": 27,
        "endColumn": 47,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T50\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 24,
        "column": 16,
        "endLine": 24,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T50\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 17,
        "column": 8,
        "endLine": 27,
        "endColumn": 47,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T50\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T6\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 29,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T6\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T6\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T6\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 29,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T6\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T6\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (86/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T6\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 16,
        "column": 8,
        "endLine": 30,
        "endColumn": 86,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T6\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 16,
        "column": 8,
        "endLine": 30,
        "endColumn": 86,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T6\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T7\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T7\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T7\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T7\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T7\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 12,
        "column": 8,
        "endLine": 12,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T7\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"sptSet\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 15,
        "column": 12,
        "endLine": 15,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T7\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 17,
        "column": 16,
        "endLine": 17,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T7\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 14,
        "column": 8,
        "endLine": 20,
        "endColumn": 56,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T7\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.min_distance",
        "line": 29,
        "column": 33,
        "endLine": 29,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T7\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Argument name \"sptSet\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.min_distance",
        "line": 32,
        "column": 12,
        "endLine": 32,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T7\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T8\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T8\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (100/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T8\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T8\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (100/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T8\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 12,
        "column": 8,
        "endLine": 15,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T8\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T9\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T9\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (138/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T9\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T9\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T9\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (138/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T9\\dijkstra.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T9\\dijkstra.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 17,
        "column": 16,
        "endLine": 17,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T9\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 15,
        "column": 8,
        "endLine": 25,
        "endColumn": 80,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T9\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 23,
        "column": 16,
        "endLine": 23,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T9\\dijkstra.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "dijkstra",
        "obj": "Dijkstra.find_shortest_paths",
        "line": 15,
        "column": 8,
        "endLine": 25,
        "endColumn": 80,
        "path": "py_app\\src\\Copilot\\Dijkstra\\T9\\dijkstra.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T1\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T1\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T1\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T1\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 8,
        "column": 12,
        "endLine": 8,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T10\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 9,
        "column": 12,
        "endLine": 9,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T11\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T12\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T12\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T17\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T17\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 14,
        "column": 12,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T18\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"a\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 15,
        "column": 12,
        "endLine": 15,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T18\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"b\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T19\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T19\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 6,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T2\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 6,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T2\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 22,
        "column": 12,
        "endLine": 22,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T2\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T22\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T22\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (98/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T22\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T22\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (98/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T23\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (125/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T23\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (125/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 10,
        "column": 12,
        "endLine": 10,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T24\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 9,
        "column": 12,
        "endLine": 9,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T27\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 8,
        "column": 12,
        "endLine": 8,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T28\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T29\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (125/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T29\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 33,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T29\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 43,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T29\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 53,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T29\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T29\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (125/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T29\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 33,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T29\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 43,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T29\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 53,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T29\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 19,
        "column": 12,
        "endLine": 19,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T3\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T30\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (141/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T30\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (141/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 12,
        "column": 12,
        "endLine": 12,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T31\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 14,
        "column": 12,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T32\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 25,
        "column": 12,
        "endLine": 25,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T33\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T34\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T34\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T34\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T34\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 9,
        "column": 12,
        "endLine": 9,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T35\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 9,
        "column": 12,
        "endLine": 9,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T36\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.gcd",
        "line": 18,
        "column": 18,
        "endLine": 18,
        "endColumn": 19,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T36\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Argument name \"a\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.gcd",
        "line": 18,
        "column": 21,
        "endLine": 18,
        "endColumn": 22,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T36\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Argument name \"b\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 9,
        "column": 12,
        "endLine": 9,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T37\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T39\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T39\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T39\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T39\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T39\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T39\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T4\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T4\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T4\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T4\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 14,
        "column": 8,
        "endLine": 14,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T4\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"a\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T40\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T40\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 9,
        "column": 12,
        "endLine": 9,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T41\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T42\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (125/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T42\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (125/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T43\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T43\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (103/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T43\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T43\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (103/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 20,
        "column": 12,
        "endLine": 20,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T44\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 23,
        "column": 12,
        "endLine": 23,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T46\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 9,
        "column": 12,
        "endLine": 9,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T47\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 8,
        "column": 12,
        "endLine": 8,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T48\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.gcd",
        "line": 17,
        "column": 18,
        "endLine": 17,
        "endColumn": 19,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T48\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Argument name \"a\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.gcd",
        "line": 17,
        "column": 21,
        "endLine": 17,
        "endColumn": 22,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T48\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Argument name \"b\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T5\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T5\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (96/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 8,
        "column": 12,
        "endLine": 8,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T50\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 10,
        "column": 12,
        "endLine": 10,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T6\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 11,
        "column": 12,
        "endLine": 11,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T7\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T8\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T8\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T8\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T8\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T9\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T9\\egyptian_fractions.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "egyptian_fractions",
        "obj": "EgyptianFractions.build",
        "line": 15,
        "column": 12,
        "endLine": 15,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\EgyptianFractions\\T9\\egyptian_fractions.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T1\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T1\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T1\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T1\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T1\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 18,
        "column": 8,
        "endLine": 21,
        "endColumn": 97,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T1\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 12,
        "column": 4,
        "endLine": 12,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T10\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 28,
        "column": 8,
        "endLine": 33,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T10\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 15,
        "column": 8,
        "endLine": 19,
        "endColumn": 78,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T11\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T12\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T12\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T12\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 17,
        "column": 8,
        "endLine": 21,
        "endColumn": 78,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T12\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T13\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T13\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T13\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 17,
        "column": 8,
        "endLine": 20,
        "endColumn": 97,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T13\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T14\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 17,
        "column": 8,
        "endLine": 21,
        "endColumn": 78,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T14\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T15\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 5,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T15\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T15\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T15\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 5,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T15\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T15\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 10,
        "column": 4,
        "endLine": 10,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T15\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 26,
        "column": 8,
        "endLine": 29,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T15\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 30,
        "column": 8,
        "endLine": 35,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T15\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T16\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T16\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T16\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T16\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T16\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 22,
        "column": 8,
        "endLine": 25,
        "endColumn": 97,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T16\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T17\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T17\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T17\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 22,
        "column": 8,
        "endLine": 25,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T17\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 26,
        "column": 8,
        "endLine": 31,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T17\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T18\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T18\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T18\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T18\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T18\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 24,
        "column": 8,
        "endLine": 27,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T18\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 29,
        "column": 8,
        "endLine": 34,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T18\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T19\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T19\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T19\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T19\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T19\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T19\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T19\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 24,
        "column": 8,
        "endLine": 29,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T19\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T2\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T2\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T2\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T2\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T2\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 22,
        "column": 8,
        "endLine": 25,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T2\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 26,
        "column": 8,
        "endLine": 31,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T2\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T20\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 22,
        "column": 8,
        "endLine": 25,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T20\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 26,
        "column": 8,
        "endLine": 31,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T20\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T21\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 23,
        "column": 8,
        "endLine": 26,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T21\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 27,
        "column": 8,
        "endLine": 32,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T21\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T22\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T22\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (98/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 32,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T22\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 33,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T22\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T22\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T22\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (98/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 32,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T22\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 33,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T22\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T22\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 27,
        "column": 8,
        "endLine": 34,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T22\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T23\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T23\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T23\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T23\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T23\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 23,
        "column": 8,
        "endLine": 26,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T23\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 27,
        "column": 8,
        "endLine": 32,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T23\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T24\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T24\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T24\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T24\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T24\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 18,
        "column": 8,
        "endLine": 21,
        "endColumn": 97,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T24\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T25\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T25\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T25\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T25\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T25\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 21,
        "column": 8,
        "endLine": 24,
        "endColumn": 97,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T25\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T26\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 24,
        "column": 8,
        "endLine": 31,
        "endColumn": 42,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T26\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 32,
        "column": 8,
        "endLine": 37,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T26\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T27\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T27\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T27\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 97,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T27\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T28\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T28\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T28\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 18,
        "column": 8,
        "endLine": 22,
        "endColumn": 78,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T28\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T29\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T29\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T29\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T29\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T29\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 23,
        "column": 8,
        "endLine": 26,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T29\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 27,
        "column": 8,
        "endLine": 32,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T29\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T3\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T3\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T3\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 31,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T3\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (152/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T3\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T3\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (94/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T3\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 31,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T3\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (152/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T3\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 24,
        "column": 8,
        "endLine": 27,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T3\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 28,
        "column": 8,
        "endLine": 33,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T3\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T30\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 19,
        "column": 8,
        "endLine": 22,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T30\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 23,
        "column": 8,
        "endLine": 28,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T30\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T31\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T31\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T31\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T31\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T31\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 97,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T31\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T32\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T32\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T32\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 18,
        "column": 8,
        "endLine": 21,
        "endColumn": 97,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T32\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T33\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 19,
        "column": 8,
        "endLine": 24,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T33\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T34\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T34\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 29,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T34\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T34\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T34\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 29,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T34\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T34\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 25,
        "column": 8,
        "endLine": 30,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T34\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T35\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 17,
        "column": 8,
        "endLine": 21,
        "endColumn": 78,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T35\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T36\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 18,
        "column": 8,
        "endLine": 23,
        "endColumn": 21,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T36\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T37\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T37\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T37\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T37\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T37\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T37\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T37\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 22,
        "column": 8,
        "endLine": 27,
        "endColumn": 50,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T37\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T38\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 5,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T38\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T38\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T38\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 5,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T38\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T38\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 10,
        "column": 4,
        "endLine": 10,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T38\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 25,
        "column": 8,
        "endLine": 30,
        "endColumn": 43,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T38\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 29,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T39\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T39\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 29,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T39\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T39\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T39\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 22,
        "column": 8,
        "endLine": 25,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T39\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 26,
        "column": 8,
        "endLine": 31,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T39\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T4\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T4\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T4\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T4\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T4\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 25,
        "column": 8,
        "endLine": 28,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T4\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 29,
        "column": 8,
        "endLine": 34,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T4\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T40\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T40\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T40\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 22,
        "column": 8,
        "endLine": 26,
        "endColumn": 78,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T40\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T41\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T41\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T41\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T41\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T41\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T41\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 10,
        "column": 4,
        "endLine": 10,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T41\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 24,
        "column": 8,
        "endLine": 29,
        "endColumn": 71,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T41\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T42\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T42\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T42\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T42\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T42\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 18,
        "column": 8,
        "endLine": 21,
        "endColumn": 101,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T42\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T43\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 18,
        "column": 8,
        "endLine": 22,
        "endColumn": 78,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T43\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T44\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 5,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T44\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 29,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T44\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T44\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T44\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 5,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T44\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 29,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T44\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T44\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 12,
        "column": 4,
        "endLine": 12,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T44\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 26,
        "column": 8,
        "endLine": 31,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T44\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T45\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T45\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T45\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (152/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T45\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T45\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T45\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (152/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T45\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 23,
        "column": 8,
        "endLine": 26,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T45\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 27,
        "column": 8,
        "endLine": 32,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T45\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T46\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T46\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T46\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T46\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T46\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 15,
        "column": 8,
        "endLine": 18,
        "endColumn": 89,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T46\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T47\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T47\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T47\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T47\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T47\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T47\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T47\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 29,
        "column": 8,
        "endLine": 34,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T47\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T48\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 22,
        "column": 8,
        "endLine": 25,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T48\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 26,
        "column": 8,
        "endLine": 31,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T48\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T49\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T49\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T49\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 18,
        "column": 8,
        "endLine": 21,
        "endColumn": 97,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T49\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T5\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T5\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T5\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 21,
        "column": 8,
        "endLine": 25,
        "endColumn": 78,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T5\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T50\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T50\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T50\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 18,
        "column": 8,
        "endLine": 22,
        "endColumn": 78,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T50\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T6\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T6\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T6\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T6\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T6\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T6\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (97/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T6\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 17,
        "column": 8,
        "endLine": 22,
        "endColumn": 97,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T6\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T7\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T7\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T7\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T7\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T7\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 23,
        "column": 8,
        "endLine": 26,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T7\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 27,
        "column": 8,
        "endLine": 32,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T7\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T8\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T8\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T8\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "floyd_warshall",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T8\\floyd_warshall.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T8\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 22,
        "column": 8,
        "endLine": 25,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T8\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 27,
        "column": 8,
        "endLine": 32,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T8\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T9\\floyd_warshall.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "floyd_warshall",
        "obj": "FloydWarshall.run",
        "line": 25,
        "column": 8,
        "endLine": 30,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\FloydWarshall\\T9\\floyd_warshall.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (4/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T1\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T1\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 4,
        "endLine": 3,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T1\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 8,
        "endLine": 5,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Knapsack\\T1\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 10,
        "path": "py_app\\src\\Copilot\\Knapsack\\T1\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 8,
        "endLine": 12,
        "endColumn": 41,
        "path": "py_app\\src\\Copilot\\Knapsack\\T1\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T10\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T10\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T10\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Knapsack\\T10\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T10\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 13,
        "endColumn": 49,
        "path": "py_app\\src\\Copilot\\Knapsack\\T10\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T11\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T11\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T11\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T11\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T11\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (102/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T11\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T11\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T11\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (105/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.__init__",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Knapsack\\T11\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 18,
        "column": 8,
        "endLine": 18,
        "endColumn": 10,
        "path": "py_app\\src\\Copilot\\Knapsack\\T11\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 20,
        "column": 8,
        "endLine": 25,
        "endColumn": 43,
        "path": "py_app\\src\\Copilot\\Knapsack\\T11\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T12\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T12\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T12\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Knapsack\\T12\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\Copilot\\Knapsack\\T12\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 8,
        "endLine": 10,
        "endColumn": 95,
        "path": "py_app\\src\\Copilot\\Knapsack\\T12\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 6,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T13\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T13\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T13\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (116/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 6,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T13\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T13\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (88/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T13\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (116/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T13\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 16,
        "column": 8,
        "endLine": 26,
        "endColumn": 116,
        "path": "py_app\\src\\Copilot\\Knapsack\\T13\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T14\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.__init__",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Knapsack\\T15\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T16\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T16\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T16\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\Copilot\\Knapsack\\T16\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 8,
        "endLine": 10,
        "endColumn": 43,
        "path": "py_app\\src\\Copilot\\Knapsack\\T16\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T17\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T17\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (110/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T17\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T17\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (110/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.__init__",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 15,
        "path": "py_app\\src\\Copilot\\Knapsack\\T17\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T17\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 13,
        "column": 8,
        "endLine": 18,
        "endColumn": 110,
        "path": "py_app\\src\\Copilot\\Knapsack\\T17\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T18\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T19\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (98/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T19\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (129/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T19\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (98/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T19\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (129/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T19\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 129,
        "path": "py_app\\src\\Copilot\\Knapsack\\T19\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T2\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T2\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 4,
        "endLine": 3,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T2\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Knapsack\\T2\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 8,
        "endLine": 5,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Knapsack\\T2\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"K\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 16,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T2\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 13,
        "endColumn": 41,
        "path": "py_app\\src\\Copilot\\Knapsack\\T2\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T20\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (117/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 22,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T20\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (117/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T20\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 19,
        "column": 8,
        "endLine": 24,
        "endColumn": 63,
        "path": "py_app\\src\\Copilot\\Knapsack\\T20\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T21\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T21\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T21\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 8,
        "endLine": 5,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Knapsack\\T21\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 8,
        "column": 16,
        "endLine": 8,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T21\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 8,
        "endLine": 14,
        "endColumn": 49,
        "path": "py_app\\src\\Copilot\\Knapsack\\T21\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T22\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T22\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T22\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 4,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T22\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 7,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T22\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (109/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T22\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T22\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\Copilot\\Knapsack\\T22\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 8,
        "endLine": 12,
        "endColumn": 95,
        "path": "py_app\\src\\Copilot\\Knapsack\\T22\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T23\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (135/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 20,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T23\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (135/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.__init__",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\Knapsack\\T23\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T23\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 15,
        "column": 8,
        "endLine": 22,
        "endColumn": 63,
        "path": "py_app\\src\\Copilot\\Knapsack\\T23\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T24\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T24\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (120/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T24\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T24\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (120/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.__init__",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 15,
        "path": "py_app\\src\\Copilot\\Knapsack\\T24\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T24\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 14,
        "column": 8,
        "endLine": 19,
        "endColumn": 53,
        "path": "py_app\\src\\Copilot\\Knapsack\\T24\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T25\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T25\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (120/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 11,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T25\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T25\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (120/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.__init__",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 15,
        "path": "py_app\\src\\Copilot\\Knapsack\\T25\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T25\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 12,
        "column": 8,
        "endLine": 19,
        "endColumn": 53,
        "path": "py_app\\src\\Copilot\\Knapsack\\T25\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T26\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T26\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T26\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 8,
        "endLine": 5,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Knapsack\\T26\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Knapsack\\T26\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"K\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 16,
        "endLine": 9,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T26\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 8,
        "column": 8,
        "endLine": 15,
        "endColumn": 41,
        "path": "py_app\\src\\Copilot\\Knapsack\\T26\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T27\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T27\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T27\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Knapsack\\T27\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\Copilot\\Knapsack\\T27\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 8,
        "endLine": 12,
        "endColumn": 43,
        "path": "py_app\\src\\Copilot\\Knapsack\\T27\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 6,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T28\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T28\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (122/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 6,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T28\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T28\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (122/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T28\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 11,
        "column": 8,
        "endLine": 16,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\Knapsack\\T28\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T29\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (119/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T29\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (119/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T29\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 11,
        "column": 8,
        "endLine": 18,
        "endColumn": 59,
        "path": "py_app\\src\\Copilot\\Knapsack\\T29\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T3\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (114/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 47,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T3\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (100/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T3\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (114/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 47,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T3\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (100/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T3\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 25,
        "column": 8,
        "endLine": 30,
        "endColumn": 49,
        "path": "py_app\\src\\Copilot\\Knapsack\\T3\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 6,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T30\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T30\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (126/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 6,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T30\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T30\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (126/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.__init__",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Knapsack\\T30\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 8,
        "endLine": 16,
        "endColumn": 57,
        "path": "py_app\\src\\Copilot\\Knapsack\\T30\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T31\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T31\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T31\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Knapsack\\T31\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\Copilot\\Knapsack\\T31\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 11,
        "endColumn": 41,
        "path": "py_app\\src\\Copilot\\Knapsack\\T31\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 3,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T32\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T32\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T32\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 3,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T32\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T32\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T32\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T32\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 15,
        "column": 8,
        "endLine": 15,
        "endColumn": 10,
        "path": "py_app\\src\\Copilot\\Knapsack\\T32\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 16,
        "column": 8,
        "endLine": 21,
        "endColumn": 43,
        "path": "py_app\\src\\Copilot\\Knapsack\\T32\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T33\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T33\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (110/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T33\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T33\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (110/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.__init__",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 15,
        "path": "py_app\\src\\Copilot\\Knapsack\\T33\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T33\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 13,
        "column": 8,
        "endLine": 18,
        "endColumn": 53,
        "path": "py_app\\src\\Copilot\\Knapsack\\T33\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T34\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T34\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T34\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Knapsack\\T34\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Knapsack\\T34\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"m\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 8,
        "endLine": 10,
        "endColumn": 41,
        "path": "py_app\\src\\Copilot\\Knapsack\\T34\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T35\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (122/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T35\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (122/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T35\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 8,
        "column": 8,
        "endLine": 15,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\Knapsack\\T35\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T36\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T36\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T36\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 18,
        "column": 8,
        "endLine": 23,
        "endColumn": 104,
        "path": "py_app\\src\\Copilot\\Knapsack\\T36\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T37\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T37\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (119/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T37\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (87/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T37\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (119/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T37\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 10,
        "column": 8,
        "endLine": 17,
        "endColumn": 59,
        "path": "py_app\\src\\Copilot\\Knapsack\\T37\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T38\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T38\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T38\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (98/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T38\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T38\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T38\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 31,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T38\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T38\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T38\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T38\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (98/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T38\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T38\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T38\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (104/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 31,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T38\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T38\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 19,
        "column": 8,
        "endLine": 33,
        "endColumn": 49,
        "path": "py_app\\src\\Copilot\\Knapsack\\T38\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T39\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T39\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T39\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Knapsack\\T39\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 8,
        "endLine": 5,
        "endColumn": 10,
        "path": "py_app\\src\\Copilot\\Knapsack\\T39\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 11,
        "endColumn": 41,
        "path": "py_app\\src\\Copilot\\Knapsack\\T39\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T4\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T4\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (92/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T4\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 8,
        "endLine": 5,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Knapsack\\T4\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Knapsack\\T4\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"K\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 16,
        "endLine": 9,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T4\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 8,
        "column": 8,
        "endLine": 15,
        "endColumn": 41,
        "path": "py_app\\src\\Copilot\\Knapsack\\T4\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T40\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T40\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T40\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Knapsack\\T40\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 13,
        "column": 8,
        "endLine": 20,
        "endColumn": 47,
        "path": "py_app\\src\\Copilot\\Knapsack\\T40\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T41\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T41\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T41\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 8,
        "endLine": 7,
        "endColumn": 10,
        "path": "py_app\\src\\Copilot\\Knapsack\\T41\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 8,
        "column": 8,
        "endLine": 13,
        "endColumn": 81,
        "path": "py_app\\src\\Copilot\\Knapsack\\T41\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T42\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T43\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (111/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T43\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (111/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T43\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 15,
        "column": 8,
        "endLine": 20,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\Knapsack\\T43\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T44\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (122/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 14,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T44\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (122/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T44\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 11,
        "column": 8,
        "endLine": 16,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\Knapsack\\T44\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T45\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 26,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T45\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T45\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T46\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T46\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 10,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T46\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T46\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T46\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 10,
        "column": 8,
        "endLine": 10,
        "endColumn": 10,
        "path": "py_app\\src\\Copilot\\Knapsack\\T46\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 11,
        "column": 8,
        "endLine": 16,
        "endColumn": 95,
        "path": "py_app\\src\\Copilot\\Knapsack\\T46\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T47\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T47\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T47\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Knapsack\\T47\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\Copilot\\Knapsack\\T47\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 8,
        "endLine": 10,
        "endColumn": 41,
        "path": "py_app\\src\\Copilot\\Knapsack\\T47\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T48\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 28,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T48\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T48\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T49\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 9,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T49\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T49\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Knapsack\\T49\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 8,
        "endLine": 5,
        "endColumn": 10,
        "path": "py_app\\src\\Copilot\\Knapsack\\T49\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 6,
        "column": 8,
        "endLine": 11,
        "endColumn": 41,
        "path": "py_app\\src\\Copilot\\Knapsack\\T49\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T5\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (114/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 15,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T5\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (114/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T5\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 12,
        "column": 8,
        "endLine": 17,
        "endColumn": 61,
        "path": "py_app\\src\\Copilot\\Knapsack\\T5\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T50\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 8,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T50\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (95/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T50\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Knapsack\\T50\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 4,
        "column": 8,
        "endLine": 4,
        "endColumn": 10,
        "path": "py_app\\src\\Copilot\\Knapsack\\T50\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 5,
        "column": 8,
        "endLine": 10,
        "endColumn": 43,
        "path": "py_app\\src\\Copilot\\Knapsack\\T50\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T6\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T6\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (120/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 12,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T6\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (85/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 16,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T6\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (120/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.__init__",
        "line": 6,
        "column": 8,
        "endLine": 6,
        "endColumn": 15,
        "path": "py_app\\src\\Copilot\\Knapsack\\T6\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"dp\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T6\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 13,
        "column": 8,
        "endLine": 18,
        "endColumn": 53,
        "path": "py_app\\src\\Copilot\\Knapsack\\T6\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T7\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T7\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (107/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 13,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T7\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (84/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 21,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T7\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (107/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T7\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 16,
        "column": 8,
        "endLine": 23,
        "endColumn": 51,
        "path": "py_app\\src\\Copilot\\Knapsack\\T7\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T8\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T8\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (101/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 2,
        "column": 4,
        "endLine": 2,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T8\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Knapsack\\T8\\knapsack.py",
        "symbol": "invalid-name",
        "message": "Variable name \"n\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 13,
        "column": 8,
        "endLine": 20,
        "endColumn": 47,
        "path": "py_app\\src\\Copilot\\Knapsack\\T8\\knapsack.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 29,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T9\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "knapsack",
        "obj": "",
        "line": 29,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Knapsack\\T9\\knapsack.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "knapsack",
        "obj": "Knapsack.bottom_up",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Knapsack\\T9\\knapsack.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T1\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\Kruskal\\T1\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\Copilot\\Kruskal\\T1\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T1\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 25,
        "column": 4,
        "endLine": 25,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T1\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 28,
        "column": 8,
        "endLine": 28,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T1\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 41,
        "column": 16,
        "endLine": 41,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T1\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T10\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 27,
        "column": 4,
        "endLine": 27,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T10\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 29,
        "column": 11,
        "endLine": 29,
        "endColumn": 12,
        "path": "py_app\\src\\Copilot\\Kruskal\\T10\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 40,
        "column": 16,
        "endLine": 40,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T10\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.__init__",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\Kruskal\\T11\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"V\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T11\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\Kruskal\\T11\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\Copilot\\Kruskal\\T11\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T11\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 27,
        "column": 4,
        "endLine": 27,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T11\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 30,
        "column": 8,
        "endLine": 30,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T11\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 42,
        "column": 12,
        "endLine": 42,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T11\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 42,
        "column": 15,
        "endLine": 42,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T11\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 42,
        "column": 18,
        "endLine": 42,
        "endColumn": 19,
        "path": "py_app\\src\\Copilot\\Kruskal\\T11\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 44,
        "column": 12,
        "endLine": 44,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T11\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 45,
        "column": 12,
        "endLine": 45,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T11\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 48,
        "column": 16,
        "endLine": 48,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T11\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.__init__",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\Kruskal\\T12\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"V\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T12\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\Kruskal\\T12\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\Copilot\\Kruskal\\T12\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T12\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T12\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 29,
        "column": 8,
        "endLine": 29,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T12\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 43,
        "column": 12,
        "endLine": 43,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T12\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 44,
        "column": 12,
        "endLine": 44,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T12\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 47,
        "column": 16,
        "endLine": 47,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T12\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T13\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T13\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 25,
        "column": 4,
        "endLine": 25,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T13\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 28,
        "column": 8,
        "endLine": 28,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T13\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 41,
        "column": 16,
        "endLine": 41,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T13\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "",
        "line": 5,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Kruskal\\T14\\kruskal.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "",
        "line": 5,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Kruskal\\T14\\kruskal.py",
        "symbol": "line-too-long",
        "message": "Line too long (90/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T14\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.kruskal",
        "line": 18,
        "column": 8,
        "endLine": 18,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T14\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.kruskal",
        "line": 28,
        "column": 12,
        "endLine": 28,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T14\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.kruskal",
        "line": 29,
        "column": 12,
        "endLine": 29,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T14\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.kruskal",
        "line": 31,
        "column": 16,
        "endLine": 31,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T14\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 36,
        "column": 34,
        "endLine": 36,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\Kruskal\\T14\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 36,
        "column": 37,
        "endLine": 36,
        "endColumn": 38,
        "path": "py_app\\src\\Copilot\\Kruskal\\T14\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 36,
        "column": 4,
        "endLine": 36,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T14\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T15\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.apply_union",
        "line": 14,
        "column": 40,
        "endLine": 14,
        "endColumn": 41,
        "path": "py_app\\src\\Copilot\\Kruskal\\T15\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.apply_union",
        "line": 14,
        "column": 43,
        "endLine": 14,
        "endColumn": 44,
        "path": "py_app\\src\\Copilot\\Kruskal\\T15\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.apply_union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 19,
        "path": "py_app\\src\\Copilot\\Kruskal\\T15\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T15\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 29,
        "column": 8,
        "endLine": 29,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T15\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 43,
        "column": 12,
        "endLine": 43,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T15\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 44,
        "column": 12,
        "endLine": 44,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T15\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 47,
        "column": 16,
        "endLine": 47,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T15\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T16\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\Kruskal\\T16\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\Copilot\\Kruskal\\T16\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T16\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T16\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 41,
        "column": 12,
        "endLine": 41,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T16\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 42,
        "column": 12,
        "endLine": 42,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T16\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T17\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T17\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T17\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 29,
        "column": 8,
        "endLine": 29,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T17\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 46,
        "column": 16,
        "endLine": 46,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T17\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T18\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 15,
        "column": 34,
        "endLine": 15,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\Kruskal\\T18\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 15,
        "column": 37,
        "endLine": 15,
        "endColumn": 38,
        "path": "py_app\\src\\Copilot\\Kruskal\\T18\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 15,
        "column": 4,
        "endLine": 15,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T18\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 27,
        "column": 4,
        "endLine": 27,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T18\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 29,
        "column": 8,
        "endLine": 29,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T18\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 44,
        "column": 16,
        "endLine": 44,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T18\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T19\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\Kruskal\\T19\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\Copilot\\Kruskal\\T19\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T19\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 27,
        "column": 4,
        "endLine": 27,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T19\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 31,
        "column": 8,
        "endLine": 31,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T19\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 44,
        "column": 12,
        "endLine": 44,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T19\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 44,
        "column": 15,
        "endLine": 44,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T19\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 44,
        "column": 18,
        "endLine": 44,
        "endColumn": 19,
        "path": "py_app\\src\\Copilot\\Kruskal\\T19\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 46,
        "column": 12,
        "endLine": 46,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T19\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 47,
        "column": 12,
        "endLine": 47,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T19\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 50,
        "column": 16,
        "endLine": 50,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T19\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Kruskal\\T2\\kruskal.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Kruskal\\T2\\kruskal.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T2\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 11,
        "column": 4,
        "endLine": 11,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T2\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 21,
        "column": 12,
        "endLine": 21,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T2\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 22,
        "column": 12,
        "endLine": 22,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T2\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T20\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\Kruskal\\T20\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\Copilot\\Kruskal\\T20\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T20\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T20\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 29,
        "column": 8,
        "endLine": 29,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T20\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 43,
        "column": 12,
        "endLine": 43,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T20\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 44,
        "column": 12,
        "endLine": 44,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T20\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 47,
        "column": 16,
        "endLine": 47,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T20\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T21\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 10,
        "column": 4,
        "endLine": 10,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T21\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 13,
        "column": 8,
        "endLine": 13,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T21\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 21,
        "column": 12,
        "endLine": 21,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T21\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 21,
        "column": 15,
        "endLine": 21,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T21\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 21,
        "column": 18,
        "endLine": 21,
        "endColumn": 19,
        "path": "py_app\\src\\Copilot\\Kruskal\\T21\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 23,
        "column": 12,
        "endLine": 23,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T21\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 24,
        "column": 12,
        "endLine": 24,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T21\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 16,
        "endLine": 26,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T21\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 30,
        "column": 12,
        "endLine": 30,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T21\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 30,
        "column": 15,
        "endLine": 30,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T21\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 38,
        "column": 34,
        "endLine": 38,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\Kruskal\\T21\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 38,
        "column": 37,
        "endLine": 38,
        "endColumn": 38,
        "path": "py_app\\src\\Copilot\\Kruskal\\T21\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 38,
        "column": 4,
        "endLine": 38,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T21\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 11,
        "column": 4,
        "endLine": 11,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T22\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 29,
        "column": 4,
        "endLine": 29,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T22\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 32,
        "column": 8,
        "endLine": 32,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T22\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 35,
        "column": 12,
        "endLine": 35,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T22\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 35,
        "column": 15,
        "endLine": 35,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T22\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 35,
        "column": 18,
        "endLine": 35,
        "endColumn": 19,
        "path": "py_app\\src\\Copilot\\Kruskal\\T22\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 37,
        "column": 12,
        "endLine": 37,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T22\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 38,
        "column": 12,
        "endLine": 38,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T22\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 40,
        "column": 16,
        "endLine": 40,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T22\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T23\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T23\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T23\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 29,
        "column": 8,
        "endLine": 29,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T23\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 43,
        "column": 12,
        "endLine": 43,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T23\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 44,
        "column": 12,
        "endLine": 44,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T23\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 47,
        "column": 16,
        "endLine": 47,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T23\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T24\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.apply_union",
        "line": 14,
        "column": 40,
        "endLine": 14,
        "endColumn": 41,
        "path": "py_app\\src\\Copilot\\Kruskal\\T24\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.apply_union",
        "line": 14,
        "column": 43,
        "endLine": 14,
        "endColumn": 44,
        "path": "py_app\\src\\Copilot\\Kruskal\\T24\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.apply_union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 19,
        "path": "py_app\\src\\Copilot\\Kruskal\\T24\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T24\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 29,
        "column": 8,
        "endLine": 29,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T24\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 38,
        "column": 12,
        "endLine": 38,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T24\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 38,
        "column": 15,
        "endLine": 38,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T24\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 38,
        "column": 18,
        "endLine": 38,
        "endColumn": 19,
        "path": "py_app\\src\\Copilot\\Kruskal\\T24\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 40,
        "column": 12,
        "endLine": 40,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T24\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 41,
        "column": 12,
        "endLine": 41,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T24\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 44,
        "column": 16,
        "endLine": 44,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T24\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T25\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\Kruskal\\T25\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\Copilot\\Kruskal\\T25\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T25\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 25,
        "column": 4,
        "endLine": 25,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T25\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 27,
        "column": 11,
        "endLine": 27,
        "endColumn": 12,
        "path": "py_app\\src\\Copilot\\Kruskal\\T25\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 37,
        "column": 12,
        "endLine": 37,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T25\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 38,
        "column": 12,
        "endLine": 38,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T25\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 40,
        "column": 16,
        "endLine": 40,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T25\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T26\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T26\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 20,
        "column": 8,
        "endLine": 20,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T26\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 25,
        "column": 12,
        "endLine": 25,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T26\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 12,
        "endLine": 26,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T26\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 29,
        "column": 16,
        "endLine": 29,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T26\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 40,
        "column": 34,
        "endLine": 40,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\Kruskal\\T26\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 40,
        "column": 37,
        "endLine": 40,
        "endColumn": 38,
        "path": "py_app\\src\\Copilot\\Kruskal\\T26\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 40,
        "column": 4,
        "endLine": 40,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T26\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.__init__",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\Kruskal\\T27\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"V\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T27\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 11,
        "column": 4,
        "endLine": 11,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T27\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 14,
        "column": 8,
        "endLine": 14,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T27\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 20,
        "column": 12,
        "endLine": 20,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T27\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"s\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 20,
        "column": 15,
        "endLine": 20,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T27\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"d\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 20,
        "column": 18,
        "endLine": 20,
        "endColumn": 19,
        "path": "py_app\\src\\Copilot\\Kruskal\\T27\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 22,
        "column": 12,
        "endLine": 22,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T27\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 23,
        "column": 12,
        "endLine": 23,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T27\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 25,
        "column": 16,
        "endLine": 25,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T27\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 35,
        "column": 20,
        "endLine": 35,
        "endColumn": 21,
        "path": "py_app\\src\\Copilot\\Kruskal\\T27\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 35,
        "column": 23,
        "endLine": 35,
        "endColumn": 24,
        "path": "py_app\\src\\Copilot\\Kruskal\\T27\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T28\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.apply_union",
        "line": 14,
        "column": 40,
        "endLine": 14,
        "endColumn": 41,
        "path": "py_app\\src\\Copilot\\Kruskal\\T28\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.apply_union",
        "line": 14,
        "column": 43,
        "endLine": 14,
        "endColumn": 44,
        "path": "py_app\\src\\Copilot\\Kruskal\\T28\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.apply_union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 19,
        "path": "py_app\\src\\Copilot\\Kruskal\\T28\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T28\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 29,
        "column": 8,
        "endLine": 29,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T28\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 40,
        "column": 12,
        "endLine": 40,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T28\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 41,
        "column": 12,
        "endLine": 41,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T28\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 44,
        "column": 16,
        "endLine": 44,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T28\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T29\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T29\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 31,
        "column": 11,
        "endLine": 31,
        "endColumn": 12,
        "path": "py_app\\src\\Copilot\\Kruskal\\T29\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 36,
        "column": 12,
        "endLine": 36,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T29\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 36,
        "column": 15,
        "endLine": 36,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T29\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 36,
        "column": 18,
        "endLine": 36,
        "endColumn": 19,
        "path": "py_app\\src\\Copilot\\Kruskal\\T29\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 38,
        "column": 12,
        "endLine": 38,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T29\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 39,
        "column": 12,
        "endLine": 39,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T29\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 41,
        "column": 16,
        "endLine": 41,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T29\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T3\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\Kruskal\\T3\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\Copilot\\Kruskal\\T3\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T3\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T3\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 29,
        "column": 8,
        "endLine": 29,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T3\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 39,
        "column": 12,
        "endLine": 39,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T3\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 39,
        "column": 15,
        "endLine": 39,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T3\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 39,
        "column": 18,
        "endLine": 39,
        "endColumn": 19,
        "path": "py_app\\src\\Copilot\\Kruskal\\T3\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 41,
        "column": 12,
        "endLine": 41,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T3\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 42,
        "column": 12,
        "endLine": 42,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T3\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 45,
        "column": 16,
        "endLine": 45,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T3\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T30\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 27,
        "column": 4,
        "endLine": 27,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T30\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 30,
        "column": 8,
        "endLine": 30,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T30\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 41,
        "column": 16,
        "endLine": 41,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T30\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T31\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\Kruskal\\T31\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\Copilot\\Kruskal\\T31\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T31\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 25,
        "column": 4,
        "endLine": 25,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T31\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 28,
        "column": 8,
        "endLine": 28,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T31\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 36,
        "column": 12,
        "endLine": 36,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T31\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 36,
        "column": 15,
        "endLine": 36,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T31\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 36,
        "column": 18,
        "endLine": 36,
        "endColumn": 19,
        "path": "py_app\\src\\Copilot\\Kruskal\\T31\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 38,
        "column": 12,
        "endLine": 38,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T31\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 39,
        "column": 12,
        "endLine": 39,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T31\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 41,
        "column": 16,
        "endLine": 41,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T31\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T32\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\Kruskal\\T32\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\Copilot\\Kruskal\\T32\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T32\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T32\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 28,
        "column": 11,
        "endLine": 28,
        "endColumn": 12,
        "path": "py_app\\src\\Copilot\\Kruskal\\T32\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 39,
        "column": 12,
        "endLine": 39,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T32\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 40,
        "column": 12,
        "endLine": 40,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T32\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 43,
        "column": 16,
        "endLine": 43,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T32\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T33\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.kruskal_algorithm",
        "line": 17,
        "column": 8,
        "endLine": 17,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T33\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.kruskal_algorithm",
        "line": 25,
        "column": 12,
        "endLine": 25,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T33\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.kruskal_algorithm",
        "line": 26,
        "column": 12,
        "endLine": 26,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T33\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.kruskal_algorithm",
        "line": 28,
        "column": 16,
        "endLine": 28,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T33\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T34\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T34\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 40,
        "column": 4,
        "endLine": 40,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T34\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T35\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 27,
        "column": 4,
        "endLine": 27,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T35\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T36\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T36\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 20,
        "column": 8,
        "endLine": 20,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T36\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 25,
        "column": 12,
        "endLine": 25,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T36\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 12,
        "endLine": 26,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T36\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 29,
        "column": 16,
        "endLine": 29,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T36\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 40,
        "column": 34,
        "endLine": 40,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\Kruskal\\T36\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 40,
        "column": 37,
        "endLine": 40,
        "endColumn": 38,
        "path": "py_app\\src\\Copilot\\Kruskal\\T36\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 40,
        "column": 4,
        "endLine": 40,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T36\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T37\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\Kruskal\\T37\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\Copilot\\Kruskal\\T37\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T37\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T37\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 30,
        "column": 8,
        "endLine": 30,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T37\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 45,
        "column": 12,
        "endLine": 45,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T37\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 46,
        "column": 12,
        "endLine": 46,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T37\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 49,
        "column": 16,
        "endLine": 49,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T37\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T38\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 19,
        "column": 4,
        "endLine": 19,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T38\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T39\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T39\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 35,
        "column": 4,
        "endLine": 35,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T39\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T4\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T4\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 39,
        "column": 4,
        "endLine": 39,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T4\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T40\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 20,
        "column": 4,
        "endLine": 20,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T40\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T41\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\Kruskal\\T41\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\Copilot\\Kruskal\\T41\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T41\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 28,
        "column": 4,
        "endLine": 28,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T41\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 31,
        "column": 8,
        "endLine": 31,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T41\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 41,
        "column": 12,
        "endLine": 41,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T41\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 41,
        "column": 15,
        "endLine": 41,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T41\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 41,
        "column": 18,
        "endLine": 41,
        "endColumn": 19,
        "path": "py_app\\src\\Copilot\\Kruskal\\T41\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 43,
        "column": 12,
        "endLine": 43,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T41\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 44,
        "column": 12,
        "endLine": 44,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T41\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 47,
        "column": 16,
        "endLine": 47,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T41\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T42\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 20,
        "column": 4,
        "endLine": 20,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T42\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T43\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T43\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 25,
        "column": 4,
        "endLine": 25,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T43\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 27,
        "column": 11,
        "endLine": 27,
        "endColumn": 12,
        "path": "py_app\\src\\Copilot\\Kruskal\\T43\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 42,
        "column": 16,
        "endLine": 42,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T43\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T44\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 27,
        "column": 4,
        "endLine": 27,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T44\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 30,
        "column": 8,
        "endLine": 30,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T44\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 43,
        "column": 16,
        "endLine": 43,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T44\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.__init__",
        "line": 3,
        "column": 8,
        "endLine": 3,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\Kruskal\\T45\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Attribute name \"V\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T45\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T45\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 25,
        "column": 4,
        "endLine": 25,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T45\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 28,
        "column": 8,
        "endLine": 28,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T45\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 38,
        "column": 12,
        "endLine": 38,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T45\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 39,
        "column": 12,
        "endLine": 39,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T45\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 41,
        "column": 16,
        "endLine": 41,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T45\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T46\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T46\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 38,
        "column": 4,
        "endLine": 38,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T46\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T47\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T47\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 25,
        "column": 4,
        "endLine": 25,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T47\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 28,
        "column": 8,
        "endLine": 28,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T47\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 41,
        "column": 16,
        "endLine": 41,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T47\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T48\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\Kruskal\\T48\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\Copilot\\Kruskal\\T48\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T48\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 23,
        "column": 4,
        "endLine": 23,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T48\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 8,
        "endLine": 26,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T48\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 36,
        "column": 12,
        "endLine": 36,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T48\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"u\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 36,
        "column": 15,
        "endLine": 36,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T48\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 36,
        "column": 18,
        "endLine": 36,
        "endColumn": 19,
        "path": "py_app\\src\\Copilot\\Kruskal\\T48\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"w\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 38,
        "column": 12,
        "endLine": 38,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T48\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 39,
        "column": 12,
        "endLine": 39,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T48\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 42,
        "column": 16,
        "endLine": 42,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T48\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T49\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 15,
        "column": 34,
        "endLine": 15,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\Kruskal\\T49\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 15,
        "column": 37,
        "endLine": 15,
        "endColumn": 38,
        "path": "py_app\\src\\Copilot\\Kruskal\\T49\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 15,
        "column": 4,
        "endLine": 15,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T49\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T49\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 34,
        "column": 8,
        "endLine": 34,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T49\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 38,
        "column": 12,
        "endLine": 38,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T49\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 39,
        "column": 12,
        "endLine": 39,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T49\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 41,
        "column": 16,
        "endLine": 41,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T49\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T5\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 12,
        "column": 4,
        "endLine": 12,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T5\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T50\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T50\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T50\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 38,
        "column": 8,
        "endLine": 38,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T50\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 46,
        "column": 16,
        "endLine": 46,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T50\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T6\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.apply_union",
        "line": 14,
        "column": 40,
        "endLine": 14,
        "endColumn": 41,
        "path": "py_app\\src\\Copilot\\Kruskal\\T6\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.apply_union",
        "line": 14,
        "column": 43,
        "endLine": 14,
        "endColumn": 44,
        "path": "py_app\\src\\Copilot\\Kruskal\\T6\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.apply_union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 19,
        "path": "py_app\\src\\Copilot\\Kruskal\\T6\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T6\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 29,
        "column": 8,
        "endLine": 29,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T6\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 41,
        "column": 12,
        "endLine": 41,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T6\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 42,
        "column": 12,
        "endLine": 42,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T6\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 45,
        "column": 16,
        "endLine": 45,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T6\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T7\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 28,
        "column": 4,
        "endLine": 28,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T7\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 31,
        "column": 8,
        "endLine": 31,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\Kruskal\\T7\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 42,
        "column": 16,
        "endLine": 42,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T7\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T8\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 34,
        "endLine": 14,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\Kruskal\\T8\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 37,
        "endLine": 14,
        "endColumn": 38,
        "path": "py_app\\src\\Copilot\\Kruskal\\T8\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Argument name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T8\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T8\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 28,
        "column": 11,
        "endLine": 28,
        "endColumn": 12,
        "path": "py_app\\src\\Copilot\\Kruskal\\T8\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 40,
        "column": 12,
        "endLine": 40,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T8\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 41,
        "column": 12,
        "endLine": 41,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\Kruskal\\T8\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"y\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 44,
        "column": 16,
        "endLine": 44,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\Kruskal\\T8\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Variable name \"e\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "",
        "line": 29,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Kruskal\\T9\\kruskal.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "",
        "line": 29,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\Kruskal\\T9\\kruskal.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.add_edge",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\Kruskal\\T9\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "kruskal",
        "obj": "Kruskal.run_kruskal_algorithm",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\Kruskal\\T9\\kruskal.py",
        "symbol": "invalid-name",
        "message": "Method name \"run_kruskal_algorithm\" doesn't conform to '^.{1,20}$' pattern",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "kruskal",
        "obj": "Kruskal.union_nodes",
        "line": 38,
        "column": 4,
        "endLine": 38,
        "endColumn": 19,
        "path": "py_app\\src\\Copilot\\Kruskal\\T9\\kruskal.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 6,
        "column": 8,
        "endLine": 28,
        "endColumn": 25,
        "path": "py_app\\src\\Copilot\\MergeSort\\T10\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 3,
        "column": 8,
        "endLine": 30,
        "endColumn": 22,
        "path": "py_app\\src\\Copilot\\MergeSort\\T12\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 6,
        "column": 8,
        "endLine": 33,
        "endColumn": 22,
        "path": "py_app\\src\\Copilot\\MergeSort\\T13\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 7,
        "column": 8,
        "endLine": 31,
        "endColumn": 22,
        "path": "py_app\\src\\Copilot\\MergeSort\\T16\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T17\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T17\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T18\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T18\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (89/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "MergeSort.merge",
        "line": 17,
        "column": 8,
        "endLine": 17,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\MergeSort\\T19\\merge_sort.py",
        "symbol": "invalid-name",
        "message": "Variable name \"l\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 3,
        "column": 8,
        "endLine": 29,
        "endColumn": 22,
        "path": "py_app\\src\\Copilot\\MergeSort\\T2\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 3,
        "column": 8,
        "endLine": 27,
        "endColumn": 22,
        "path": "py_app\\src\\Copilot\\MergeSort\\T23\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T24\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 18,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T24\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge",
        "line": 17,
        "column": 8,
        "endLine": 32,
        "endColumn": 36,
        "path": "py_app\\src\\Copilot\\MergeSort\\T24\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 3,
        "column": 8,
        "endLine": 32,
        "endColumn": 22,
        "path": "py_app\\src\\Copilot\\MergeSort\\T25\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 3,
        "column": 8,
        "endLine": 32,
        "endColumn": 22,
        "path": "py_app\\src\\Copilot\\MergeSort\\T26\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 3,
        "column": 8,
        "endLine": 30,
        "endColumn": 22,
        "path": "py_app\\src\\Copilot\\MergeSort\\T29\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 5,
        "column": 12,
        "endLine": 5,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\MergeSort\\T30\\merge_sort.py",
        "symbol": "invalid-name",
        "message": "Variable name \"L\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 6,
        "column": 12,
        "endLine": 6,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\MergeSort\\T30\\merge_sort.py",
        "symbol": "invalid-name",
        "message": "Variable name \"R\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 3,
        "column": 8,
        "endLine": 34,
        "endColumn": 22,
        "path": "py_app\\src\\Copilot\\MergeSort\\T30\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 3,
        "column": 8,
        "endLine": 32,
        "endColumn": 22,
        "path": "py_app\\src\\Copilot\\MergeSort\\T34\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 3,
        "column": 8,
        "endLine": 30,
        "endColumn": 22,
        "path": "py_app\\src\\Copilot\\MergeSort\\T35\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 3,
        "column": 8,
        "endLine": 27,
        "endColumn": 25,
        "path": "py_app\\src\\Copilot\\MergeSort\\T36\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T37\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 24,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T37\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge",
        "line": 23,
        "column": 8,
        "endLine": 37,
        "endColumn": 36,
        "path": "py_app\\src\\Copilot\\MergeSort\\T37\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T38\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 17,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T38\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge",
        "line": 16,
        "column": 8,
        "endLine": 29,
        "endColumn": 36,
        "path": "py_app\\src\\Copilot\\MergeSort\\T38\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T41\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T41\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge",
        "line": 18,
        "column": 8,
        "endLine": 33,
        "endColumn": 36,
        "path": "py_app\\src\\Copilot\\MergeSort\\T41\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 4,
        "column": 8,
        "endLine": 33,
        "endColumn": 22,
        "path": "py_app\\src\\Copilot\\MergeSort\\T42\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T43\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 19,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T43\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge",
        "line": 18,
        "column": 8,
        "endLine": 33,
        "endColumn": 36,
        "path": "py_app\\src\\Copilot\\MergeSort\\T43\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 6,
        "column": 12,
        "endLine": 6,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\MergeSort\\T44\\merge_sort.py",
        "symbol": "invalid-name",
        "message": "Variable name \"L\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 7,
        "column": 12,
        "endLine": 7,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\MergeSort\\T44\\merge_sort.py",
        "symbol": "invalid-name",
        "message": "Variable name \"R\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 4,
        "column": 8,
        "endLine": 33,
        "endColumn": 22,
        "path": "py_app\\src\\Copilot\\MergeSort\\T44\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 6,
        "column": 8,
        "endLine": 28,
        "endColumn": 22,
        "path": "py_app\\src\\Copilot\\MergeSort\\T45\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 7,
        "column": 12,
        "endLine": 7,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\MergeSort\\T48\\merge_sort.py",
        "symbol": "invalid-name",
        "message": "Variable name \"L\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 10,
        "column": 12,
        "endLine": 10,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\MergeSort\\T48\\merge_sort.py",
        "symbol": "invalid-name",
        "message": "Variable name \"R\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 3,
        "column": 8,
        "endLine": 41,
        "endColumn": 22,
        "path": "py_app\\src\\Copilot\\MergeSort\\T48\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T5\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T5\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T5\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 36,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T5\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 41,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T5\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T5\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 25,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T5\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 30,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T5\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (83/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 36,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T5\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (80/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 41,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T5\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (81/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge",
        "line": 22,
        "column": 8,
        "endLine": 45,
        "endColumn": 36,
        "path": "py_app\\src\\Copilot\\MergeSort\\T5\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T50\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "merge_sort",
        "obj": "",
        "line": 23,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\MergeSort\\T50\\merge_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (91/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge",
        "line": 22,
        "column": 8,
        "endLine": 35,
        "endColumn": 36,
        "path": "py_app\\src\\Copilot\\MergeSort\\T50\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 6,
        "column": 8,
        "endLine": 33,
        "endColumn": 22,
        "path": "py_app\\src\\Copilot\\MergeSort\\T6\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 3,
        "column": 8,
        "endLine": 32,
        "endColumn": 22,
        "path": "py_app\\src\\Copilot\\MergeSort\\T7\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "merge_sort",
        "obj": "MergeSort.merge_sort",
        "line": 3,
        "column": 8,
        "endLine": 30,
        "endColumn": 22,
        "path": "py_app\\src\\Copilot\\MergeSort\\T9\\merge_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T1\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 13,
        "column": 4,
        "endLine": 13,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T1\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 9,
        "column": 4,
        "endLine": 9,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T10\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 11,
        "column": 12,
        "endLine": 11,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\QuickSort\\T10\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Variable name \"pi\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 16,
        "column": 4,
        "endLine": 16,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T10\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T13\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 7,
        "column": 12,
        "endLine": 7,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\QuickSort\\T13\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Variable name \"p\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 11,
        "column": 4,
        "endLine": 11,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T13\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.quicksort",
        "line": 5,
        "column": 33,
        "endLine": 5,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\QuickSort\\T14\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Argument name \"lo\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.quicksort",
        "line": 5,
        "column": 37,
        "endLine": 5,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\QuickSort\\T14\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Argument name \"hi\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quicksort",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T14\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.quicksort",
        "line": 7,
        "column": 12,
        "endLine": 7,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\QuickSort\\T14\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Variable name \"p\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 11,
        "column": 33,
        "endLine": 11,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\QuickSort\\T14\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Argument name \"lo\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 11,
        "column": 37,
        "endLine": 11,
        "endColumn": 39,
        "path": "py_app\\src\\Copilot\\QuickSort\\T14\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Argument name \"hi\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 11,
        "column": 4,
        "endLine": 11,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T14\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quickSort",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T16\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.quickSort",
        "line": 7,
        "column": 12,
        "endLine": 7,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\QuickSort\\T16\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Variable name \"pi\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 11,
        "column": 4,
        "endLine": 11,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T16\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T17\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T18\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 11,
        "column": 4,
        "endLine": 11,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T18\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T19\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T19\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.quickSort",
        "line": 10,
        "column": 12,
        "endLine": 10,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\QuickSort\\T2\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Variable name \"pi\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T20\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 7,
        "column": 12,
        "endLine": 7,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\QuickSort\\T20\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Variable name \"pi\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 11,
        "column": 4,
        "endLine": 11,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T20\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T21\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 13,
        "column": 4,
        "endLine": 13,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T21\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T22\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T23\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 11,
        "column": 4,
        "endLine": 11,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T23\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T24\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quickSort",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T25\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quickSort",
        "line": 10,
        "column": 4,
        "endLine": 10,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T26\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 16,
        "column": 4,
        "endLine": 16,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T26\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T27\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 12,
        "column": 4,
        "endLine": 12,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T27\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.sort",
        "line": 9,
        "column": 12,
        "endLine": 9,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\QuickSort\\T29\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T30\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T30\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.sort.quick_sort",
        "line": 18,
        "column": 16,
        "endLine": 18,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T31\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Variable name \"pi\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quickSort",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T32\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 11,
        "column": 4,
        "endLine": 11,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T32\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.swap",
        "line": 21,
        "column": 4,
        "endLine": 21,
        "endColumn": 12,
        "path": "py_app\\src\\Copilot\\QuickSort\\T32\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quickSort",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T33\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 11,
        "column": 4,
        "endLine": 11,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T33\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T34\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 10,
        "column": 12,
        "endLine": 10,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\QuickSort\\T34\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Variable name \"p\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T34\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T35\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 15,
        "column": 4,
        "endLine": 15,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T35\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.swap",
        "line": 27,
        "column": 4,
        "endLine": 27,
        "endColumn": 12,
        "path": "py_app\\src\\Copilot\\QuickSort\\T35\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T36\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 13,
        "column": 4,
        "endLine": 13,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T36\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.swap",
        "line": 25,
        "column": 4,
        "endLine": 25,
        "endColumn": 12,
        "path": "py_app\\src\\Copilot\\QuickSort\\T36\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T37\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T37\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T38\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 7,
        "column": 4,
        "endLine": 7,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T4\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T40\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T40\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.swap",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 12,
        "path": "py_app\\src\\Copilot\\QuickSort\\T40\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.sort",
        "line": 3,
        "column": 8,
        "endLine": 15,
        "endColumn": 78,
        "path": "py_app\\src\\Copilot\\QuickSort\\T41\\quick_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T42\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 16,
        "column": 4,
        "endLine": 16,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T42\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.swap",
        "line": 28,
        "column": 4,
        "endLine": 28,
        "endColumn": 12,
        "path": "py_app\\src\\Copilot\\QuickSort\\T42\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T43\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 13,
        "column": 4,
        "endLine": 13,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T43\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\QuickSort\\T44\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "",
        "line": 27,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "py_app\\src\\Copilot\\QuickSort\\T44\\quick_sort.py",
        "symbol": "line-too-long",
        "message": "Line too long (82/79)",
        "message-id": "C0301"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T44\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 16,
        "column": 4,
        "endLine": 16,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T44\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.sort",
        "line": 3,
        "column": 8,
        "endLine": 14,
        "endColumn": 63,
        "path": "py_app\\src\\Copilot\\QuickSort\\T45\\quick_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.sort",
        "line": 3,
        "column": 8,
        "endLine": 14,
        "endColumn": 65,
        "path": "py_app\\src\\Copilot\\QuickSort\\T46\\quick_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quickSort",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T47\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.quickSort",
        "line": 7,
        "column": 12,
        "endLine": 7,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\QuickSort\\T47\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Variable name \"pi\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 12,
        "column": 4,
        "endLine": 12,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T47\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.sort",
        "line": 5,
        "column": 19,
        "endLine": 5,
        "endColumn": 20,
        "path": "py_app\\src\\Copilot\\QuickSort\\T49\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Argument name \"a\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.sort_helper",
        "line": 8,
        "column": 26,
        "endLine": 8,
        "endColumn": 27,
        "path": "py_app\\src\\Copilot\\QuickSort\\T49\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Argument name \"a\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.sort_helper",
        "line": 8,
        "column": 29,
        "endLine": 8,
        "endColumn": 31,
        "path": "py_app\\src\\Copilot\\QuickSort\\T49\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Argument name \"lo\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.sort_helper",
        "line": 8,
        "column": 33,
        "endLine": 8,
        "endColumn": 35,
        "path": "py_app\\src\\Copilot\\QuickSort\\T49\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Argument name \"hi\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.sort_helper",
        "line": 8,
        "column": 4,
        "endLine": 8,
        "endColumn": 19,
        "path": "py_app\\src\\Copilot\\QuickSort\\T49\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 15,
        "column": 24,
        "endLine": 15,
        "endColumn": 25,
        "path": "py_app\\src\\Copilot\\QuickSort\\T49\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Argument name \"a\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 15,
        "column": 27,
        "endLine": 15,
        "endColumn": 29,
        "path": "py_app\\src\\Copilot\\QuickSort\\T49\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Argument name \"lo\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 15,
        "column": 31,
        "endLine": 15,
        "endColumn": 33,
        "path": "py_app\\src\\Copilot\\QuickSort\\T49\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Argument name \"hi\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 15,
        "column": 4,
        "endLine": 15,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T49\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 18,
        "column": 8,
        "endLine": 18,
        "endColumn": 9,
        "path": "py_app\\src\\Copilot\\QuickSort\\T49\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Variable name \"v\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 19,
        "column": 8,
        "endLine": 30,
        "endColumn": 34,
        "path": "py_app\\src\\Copilot\\QuickSort\\T49\\quick_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 19,
        "column": 8,
        "endLine": 30,
        "endColumn": 34,
        "path": "py_app\\src\\Copilot\\QuickSort\\T49\\quick_sort.py",
        "symbol": "too-many-nested-blocks",
        "message": "Too many nested blocks (3/2)",
        "message-id": "R1702"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.exchange",
        "line": 34,
        "column": 23,
        "endLine": 34,
        "endColumn": 24,
        "path": "py_app\\src\\Copilot\\QuickSort\\T49\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Argument name \"a\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.exchange",
        "line": 34,
        "column": 4,
        "endLine": 34,
        "endColumn": 16,
        "path": "py_app\\src\\Copilot\\QuickSort\\T49\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T5\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 11,
        "column": 4,
        "endLine": 11,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T5\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.sort",
        "line": 8,
        "column": 12,
        "endLine": 8,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\QuickSort\\T50\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Variable name \"x\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 5,
        "column": 4,
        "endLine": 5,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T6\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 7,
        "column": 12,
        "endLine": 7,
        "endColumn": 14,
        "path": "py_app\\src\\Copilot\\QuickSort\\T6\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Variable name \"pi\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 11,
        "column": 4,
        "endLine": 11,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T6\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quickSort",
        "line": 10,
        "column": 4,
        "endLine": 10,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T7\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.quickSort",
        "line": 12,
        "column": 12,
        "endLine": 12,
        "endColumn": 13,
        "path": "py_app\\src\\Copilot\\QuickSort\\T7\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Variable name \"p\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 16,
        "column": 4,
        "endLine": 16,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T7\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.sort",
        "line": 2,
        "column": 19,
        "endLine": 2,
        "endColumn": 20,
        "path": "py_app\\src\\Copilot\\QuickSort\\T8\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Argument name \"a\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 6,
        "column": 25,
        "endLine": 6,
        "endColumn": 26,
        "path": "py_app\\src\\Copilot\\QuickSort\\T8\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Argument name \"a\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.quick_sort",
        "line": 6,
        "column": 4,
        "endLine": 6,
        "endColumn": 18,
        "path": "py_app\\src\\Copilot\\QuickSort\\T8\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 14,
        "column": 24,
        "endLine": 14,
        "endColumn": 25,
        "path": "py_app\\src\\Copilot\\QuickSort\\T8\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Argument name \"a\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.partition",
        "line": 14,
        "column": 4,
        "endLine": 14,
        "endColumn": 17,
        "path": "py_app\\src\\Copilot\\QuickSort\\T8\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (5/3)",
        "message-id": "R0913"
    },
    {
        "type": "convention",
        "module": "quick_sort",
        "obj": "QuickSort.swap",
        "line": 26,
        "column": 19,
        "endLine": 26,
        "endColumn": 20,
        "path": "py_app\\src\\Copilot\\QuickSort\\T8\\quick_sort.py",
        "symbol": "invalid-name",
        "message": "Argument name \"a\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.swap",
        "line": 26,
        "column": 4,
        "endLine": 26,
        "endColumn": 12,
        "path": "py_app\\src\\Copilot\\QuickSort\\T8\\quick_sort.py",
        "symbol": "too-many-arguments",
        "message": "Too many arguments (4/3)",
        "message-id": "R0913"
    },
    {
        "type": "refactor",
        "module": "quick_sort",
        "obj": "QuickSort.sort",
        "line": 6,
        "column": 11,
        "endLine": 6,
        "endColumn": 23,
        "path": "py_app\\src\\Copilot\\QuickSort\\T9\\quick_sort.py",
        "symbol": "magic-value-comparison",
        "message": "Consider using a named constant or an enum instead of '2'.",
        "message-id": "R2004"
    }
]
